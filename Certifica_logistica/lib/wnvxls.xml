<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Winnovative.ExcelLib</name>
    </assembly>
    <members>
        <member name="T:Winnovative.ExcelLib.ExcelWorkbook">
            <summary>
            The Excel Workbook
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.#ctor">
            <summary>
            Creates a workbook with a single worksheet. The default workbook format is Excel 2003.
            To create a workbook for a different Excel format, like Excel 2007, you can use the constructor 
            with the Format parameter.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.#ctor(Winnovative.ExcelLib.ExcelWorkbookFormat)">
            <summary>
            Creates a workbook with a single worksheet. The format of the workbook is specified by the workbookFormat parameter.
            The currently supported formats are Excel 97-2003 format and Excel 2007 format. 
            </summary>
            <param name="workbookFormat">The format of the workbook. The currently supported formats are Excel 97-2003 format and Excel 2007 format.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.#ctor(Winnovative.ExcelLib.ExcelWorkbookFormat,Winnovative.ExcelLib.ExcelWorkbookDefaultSettings)">
            <summary>
            Creates a workbook with a single worksheet. The format of the workbook is specified by the workbookFormat parameter.
            The currently supported formats are Excel 97-2003 format and Excel 2007 format. 
            </summary>
            <param name="workbookFormat">The format of the workbook. The currently supported formats are Excel 97-2003 format and Excel 2007 format.</param>
            <param name="defaultSettings">An object encapsulating the default font, column width and row height for the newly created worksheets in this workbook.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.#ctor(System.String)">
            <summary>
            Opens a workbook from the specified Excel file
            </summary>
            <param name="excelFileName">The file name of the Excel file to be loaded</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.#ctor(System.String,System.String)">
            <summary>
            Opens a workbook from the specified Excel file with the specified password
            </summary>
            <param name="excelFileName">The file name of the Excel file to be loaded</param>
            <param name="openPassword">The password to open the workbook</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.#ctor(System.String,System.String,Winnovative.ExcelLib.ExcelWorkbookDefaultSettings)">
            <summary>
            Opens a workbook from the specified Excel file with the specified password
            </summary>
            <param name="excelFileName">The file name of the Excel file to be loaded</param>
            <param name="openPassword">The password to open the workbook</param>
            <param name="defaultSettings">The default settings for the newly created workbook (like default font, row height or column width).</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.#ctor(System.IO.Stream)">
            <summary>
            Opens a workbook from the specified Excel stream
            </summary>
            <param name="excelStream">The Excel stream to be loaded</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.#ctor(System.IO.Stream,System.String)">
            <summary>
            Opens a workbook from the specified Excel stream with the specified password
            </summary>
            <param name="excelStream">The Excel stream to be loaded</param>
            <param name="openPassword">The password to open the workbook</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.#ctor(System.IO.Stream,System.String,Winnovative.ExcelLib.ExcelWorkbookDefaultSettings)">
            <summary>
            Opens a workbook from the specified Excel stream with the specified password
            </summary>
            <param name="excelStream">The Excel stream to be loaded</param>
            <param name="openPassword">The password to open the workbook</param>
            <param name="defaultSettings">The default settings for the newly created workbook (like default font, row height or column width).</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.LoadFromCsv(System.String,System.String,Winnovative.ExcelLib.ExcelWorkbookFormat)">
            <summary>
            Loads a CSV file into a worksheet. The default encoding of the text in CSV is assumed to be UTF-8. 
            The values from CSV will be imported in the top left corner of the worksheet.
            </summary>
            <param name="csvFileName">The full path of the CSV file.</param>
            <param name="fieldsSeparator">The fields separator in CSV (usually ',')</param>
            <param name="workbookFormat">The format of the created workbook ( Excel 97-2003 .xls or Excel 2007 .xlsx).</param>
            <returns>The newly created workbook.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.LoadFromCsv(System.String,System.Text.Encoding,System.String,System.Int32,System.Int32,Winnovative.ExcelLib.ExcelWorkbookFormat,Winnovative.ExcelLib.ExcelWorkbookDefaultSettings)">
            <summary>
            Loads a CSV file into a worksheet.
            </summary>
            <param name="csvFileName">The full path of the CSV file.</param>
            <param name="textEncoding">The encoding of the text inside CSV (e.g. windows-1252, utf-8, etc). </param>
            <param name="fieldsSeparator">The fields separator in CSV (usually ',')</param>
            <param name="topRowIndex">The one based index of the first row in worksheet where the import will start.</param>
            <param name="leftColumnIndex">The one based index of the first column in worksheet where the import will start.</param>
            <param name="workbookFormat">The format of the created workbook ( Excel 97-2003 .xls or Excel 2007 .xlsx).</param>
            <param name="defaultSettings">The default settings for the newly created workbook (like default font, row height or column width).</param>
            <returns>The newly created workbook.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.LoadFromCsv(System.IO.Stream,System.String,Winnovative.ExcelLib.ExcelWorkbookFormat)">
            <summary>
            Loads a CSV stream into a worksheet. The default encoding of the text in CSV is assumed to be UTF-8. 
            The values from CSV will be imported in the top left corner of the worksheet.
            </summary>
            <param name="csvStream">The stream containing the CSV document.</param>
            <param name="fieldsSeparator">The fields separator in CSV (usually ',')</param>
            <param name="workbookFormat">The format of the created workbook ( Excel 97-2003 .xls or Excel 2007 .xlsx).</param>
            <returns>The newly created workbook.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.LoadFromCsv(System.IO.Stream,System.Text.Encoding,System.String,System.Int32,System.Int32,Winnovative.ExcelLib.ExcelWorkbookFormat,Winnovative.ExcelLib.ExcelWorkbookDefaultSettings)">
            <summary>
            Loads a CSV stream into a worksheet.
            </summary>
            <param name="csvStream">The stream containing the CSV document.</param>
            <param name="textEncoding">The encoding of the text inside CSV (e.g. windows-1252, utf-8, etc). </param>
            <param name="fieldsSeparator">The fields separator in CSV (usually ',')</param>
            <param name="topRowIndex">The one based index of the first row in worksheet where the import will start.</param>
            <param name="leftColumnIndex">The one based index of the first column in worksheet where the import will start.</param>
            <param name="workbookFormat">The format of the created workbook ( Excel 97-2003 .xls or Excel 2007 .xlsx).</param>
            <param name="defaultSettings">The default settings for the newly created workbook (like default font, row height or column width).</param>
            <returns>The newly created workbook.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.UpdateFormulaResult">
            <summary>
            Calculate formula results for all the worksheets in the workbook
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.Save">
            <summary>
            Saves the Excel workbook as byte array that can be further saved into a file or send over HTTP.
            The output format (Excel 97-2003 .xls or Excel 2007 .xlsx) is the current format of the workbook. 
            </summary>
            <returns>The byte array representation of the workbook.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.Save(System.String)">
            <summary>
            Saves the workbook as the specified file. 
            The output format (Excel 97-2003 .xls or Excel 2007 .xlsx) is the current format of the workbook. 
            </summary>
            <param name="excelFilename">The name of the file where the workbook will be saved</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.Save(System.IO.Stream)">
            <summary>A
            Saves the workbook in the specified stream.
            The output format (Excel 97-2003 .xls or Excel 2007 .xlsx) is the current format of the workbook. 
            </summary>
            <param name="stream">The stream where the workbook will be saved.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.Save(System.Web.HttpResponse,System.String)">
            <summary>
            Saves the workbook to the specified HttpResponse.
            The output format (Excel 97-2003 .xls or Excel 2007 .xlsx) is the current format of the workbook. 
            </summary>
            <param name="downloadFileName">The downloaded file name.</param>
            <param name="httpResponse">The HttpResponse where the workbook will be saved.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.Save(System.Web.HttpResponse,System.String,System.Boolean)">
            <summary>
            Saves the workbook to the specified HttpResponse.
            The output format (Excel 97-2003 .xls or Excel 2007 .xlsx) is the current format of the workbook. 
            </summary>
            <param name="downloadFileName">The downloaded file name.</param>
            <param name="httpResponse">The HttpResponse where the workbook will be saved.</param>
            <param name="openInline">When true the prompt dialog will be displayed at download to open or save the document.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.SaveToCsv(System.Int32,System.String,System.String)">
            <summary>
            Saves the worksheet at the specified index to a file in CSV format. The default UTF-8 text encoding is used when saving the output file.
            </summary>
            <param name="worksheetIndex">The zero based index of the worksheet to be saved.</param>
            <param name="csvFileName">The path of the saved CSV file.</param>
            <param name="fieldsSeparator">The fields separator in the saved CSV file</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.SaveToCsv(System.Int32,System.String,System.String,System.Text.Encoding)">
            <summary>
            Saves the worksheet at the specified index to a file in CSV format using the specified text encoding for the output file. 
            </summary>
            <param name="worksheetIndex">The zero based index of the worksheet to be saved.</param>
            <param name="csvFileName">The path of the saved CSV file.</param>
            <param name="fieldsSeparator">The fields separator in the saved CSV file.</param>
            <param name="textEncoding">The text encoding of the output file.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.SaveToCsv(System.Int32,System.IO.Stream,System.String)">
            <summary>
            Saves the worksheet at the specified index to a stream in CSV format. The default UTF-8 text encoding is used when saving the output stream. 
            </summary>
            <param name="worksheetIndex">The zero based index of the worksheet to be saved.</param>
            <param name="csvStream">The output stream. For saving in memory a MemoryStream can be used.</param>
            <param name="fieldsSeparator">The fields separator in the saved CSV document.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.SaveToCsv(System.Int32,System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            Saves the worksheet at the specified index to a stream in CSV format using the specified text encoding for the output. 
            </summary>
            <param name="worksheetIndex">The zero based index of the worksheet to be saved.</param>
            <param name="csvStream">The output stream. For saving in memory a MemoryStream can be used.</param>
            <param name="fieldsSeparator">The fields separator in the saved CSV document.</param>
            <param name="textEncoding">The text encoding of the output strea.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorkbook.Close">
            <summary>
            Closes the workbook and releases all the resources. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.LicenseKey">
            <summary>
            Gets or sets the license key for the library. 
            When this property is set to null value the library works in demo mode.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.DefaultFontName">
            <summary>
            Gets or sets default font name for the newly created worksheets.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.DefaultFontSizePoints">
            <summary>
            Gets or sets default font size in points for the newly created worksheets.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.DefaultRowHeightPoints">
            <summary>
            Gets the default row height in points for the newly created worksheets.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.DefaultColumnWidthChars">
            <summary>
            Gets default column width in characters for the newly created worksheets.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.SerializeDefaultRowHeight">
            <summary>
            A flag indicating if the DefaultRowHeightPoints property should be serialized or not when the the format is Xlsx_2007.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.SerializeDefaultColumnWidth">
            <summary>
            A flag indicating if the DefaultRowHeightPoints property should be serialized or not when the the format is Xls_2007.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.Worksheets">
            <summary>
            Gets the worksheets collection of this workbook.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.Styles">
            <summary>
            Gets the cell styles collection of this workbook.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.DocumentProperties">
            <summary>
            Gets the object encpsulating the document properties like author, title, subject, etc.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.DocumentSecurity">
            <summary>
            Gets an object used to manage the document security like workbook structure and windows protection, 
            workbook open/write password protection. Works only for Excel 2003 .xls format.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.Palette">
            <summary>
            Gets the colors palette of the workbook.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.UnitsConverter">
            <summary>
            Gets an object used to convert values between various Excel measurement units (points, pixels, width characters)
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.NamedRanges">
            <summary>
            Gets the named ranges collection of this workbook (Workbook scope named ranges).
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.ChartWorksheets">
            <summary>
            Gets the collection of chart worksheets of this workbook.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.Format">
            <summary>
            Gets or sets the Excel workbook format (Excel 97-2003 .xls or Excel 2007 .xlsx). This property gives the output format
            when the workbook is saved and controls the features allowed when the workbook is updated by the library. 
            When creating an empty workbook the format is Excel 97-2003. When the workbook is created 
            from an existing excel file or stream, the format is the format of the opened excel document.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.ReadOnly">
            <summary>
            Gets a value that indicates whether the workbook has been opened as read-only
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.ActiveSheetIndex">
            <summary>
            Gets or sets the active sheet index. The index is zero based. The property can be set with a non-negative value. 
            Returns a negative value when no sheet is active in the workbook.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.FormulaRowsSeparator">
            <summary>
            Gets or sets the rows separator used when parsing arrays in formulas. Set this propery before assigning
            a formula expression to a cell. The default value is ';'
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.FormulaParamsSeparator">
            <summary>
            Gets or sets the separator between formula parameters used when parsing formulas. Set this propery before assigning
            a formula expression to a cell. The default value is ','.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbook.FormulaNumberFormat">
            <summary>
            Gets or sets the number format in formula used when parsing formulas. Set this propery before assigning
            a formula expression to a cell. The default value is the number format for the current culture.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelShapeFillTextureType">
            <summary>
            Represents the possible textures of the shape interior.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.Papyrus">
            <summary>
            Papyrus texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.Canvas">
            <summary>
            Canvas texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.Denim">
            <summary>
            Denim texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.WovenMat">
            <summary>
            Woven Mat texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.WaterDroplets">
            <summary>
            Water Droplets texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.PaperBag">
            <summary>
            Paper Bag texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.FishFossil">
            <summary>
            Fish Fossil texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.Sand">
            <summary>
            Sand texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.GreenMarble">
            <summary>
            Green Marble texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.WhiteMarble">
            <summary>
            White Marble texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.BrownMarble">
            <summary>
            Brown Marble texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.Granite">
            <summary>
            Granite texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.Newsprint">
            <summary>
            Newsprint texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.RecycledPaper">
            <summary>
            Recycled Paper texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.Parchmen">
            <summary>
            Parchment texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.Stationery">
            <summary>
            Stationery texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.BlueTissue">
            <summary>
            Blue Tissue texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.PinkTissue">
            <summary>
            Pink Tissue texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.PurpleMesh">
            <summary>
            Purple Mesh texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.Bouquet">
            <summary>
            Bouquet texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.Cork">
            <summary>
            Cork texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.Walnut">
            <summary>
            Walnut texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.Oak">
            <summary>
            Oak texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.MediumWood">
            <summary>
            Medium Wood texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillTextureType.CustomTexture">
            <summary>
            Custom texture.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelPicturesCollection">
            <summary>
            Represents a collection of picture in a worksheet.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelPicturesCollection.AddPicture(System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Adds a picture to the collection. The location of the picture inside the worksheet is specified by 
            the left column and the top row parameters.
            </summary>
            <param name="leftColumnIndex">The one based left column index of the picture area in the worksheet. 
            The left column is included in the picture area.</param>
            <param name="topRowIndex">The one based top row index of the picture area in the worksheet. 
            The top row is included in the picture area.</param>
            <param name="picture">The System.Drawing.Image object to be added. The Image object can be obtained from a file or a stream 
            using .NET methods.</param>
            <returns>The newly added picture.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelPicturesCollection.AddPicture(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Image)">
            <summary>
            Adds a picture to the collection. The location and the size of the picture inside the worksheet are specified by the 
            left column, top row, right column and bottom row parameters.
            </summary>
            <param name="leftColumnIndex">The one based left column index of the chart area in the worksheet. 
            The left column is included in the chart area.</param>
            <param name="topRowIndex">The one based top row index of the chart area in the worksheet. 
            The top row is included in the chart area.</param>
            <param name="rightColumnIndex">The one based right column index of the chart area in the worksheet. 
            The right column is not included in the chart area.</param>
            <param name="bottomRowIndex">The one based bottom row index of the chart area in the worksheet. 
            The bottom row is not included in the chart area.</param>
            <param name="picture">The System.Drawing.Image object to be added. The Image object can be obtained from a file or a stream 
            using .NET methods.</param>
            <returns>The newly added picture.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelPicturesCollection.AddPicture(System.Int32,System.Int32,System.String)">
            <summary>
            Adds a picture from file to the pictures collection. The location of the picture inside the worksheet is specified by 
            the left column and the top row parameters.
            </summary>
            <param name="leftColumnIndex">The one based left column index of the picture area in the worksheet. 
            The left column is included in the picture area.</param>
            <param name="topRowIndex">The one based top row index of the picture area in the worksheet. 
            The top row is included in the picture area.</param>
            <param name="filePath">The full path of the image file to be added.</param>
            <returns>The newly added picture.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelPicturesCollection.AddPicture(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a picture to the collection. The location and the size of the picture inside the worksheet are specified by the 
            left column, top row, right column and bottom row parameters.
            </summary>
            <param name="leftColumnIndex">The one based left column index of the chart area in the worksheet. 
            The left column is included in the chart area.</param>
            <param name="topRowIndex">The one based top row index of the chart area in the worksheet. 
            The top row is included in the chart area.</param>
            <param name="rightColumnIndex">The one based right column index of the chart area in the worksheet. 
            The right column is not included in the chart area.</param>
            <param name="bottomRowIndex">The one based bottom row index of the chart area in the worksheet. 
            The bottom row is not included in the chart area.</param>
            <param name="filePath">The full path of the image file to be added.</param>
            <returns>The newly added picture.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelPicturesCollection.AddPicture(System.Int32,System.Int32,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Adds a picture to the collection. The location and the size of the picture inside the worksheet are specified by the 
            left column, top row, width scale and height scale parameters.
            </summary>
            <param name="leftColumnIndex">The one based left column index of the chart area in the worksheet. 
            The left column is included in the chart area.</param>
            <param name="topRowIndex">The one based top row index of the chart area in the worksheet. 
            The top row is included in the chart area.</param>
            <param name="picture">The System.Drawing.Image object to be added. The Image object can be obtained from a file or a stream 
            using .NET methods.</param>
            <param name="widthScale">Scale of image width as a percentage.</param>
            <param name="heightScale">Scale of image height as a percentage.</param>
            <returns>The newly added picture.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelPicturesCollection.AddPicture(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Adds a picture to the collection. The location and the size of the picture inside the worksheet are specified by the 
            left column, top row, width scale and height scale parameters.
            </summary>
            <param name="leftColumnIndex">The one based left column index of the chart area in the worksheet. 
            The left column is included in the chart area.</param>
            <param name="topRowIndex">The one based top row index of the chart area in the worksheet. 
            The top row is included in the chart area.</param>
            <param name="filePath">The full path of the image file to be added.</param>
            <param name="widthScale">Scale of image width as a percentage.</param>
            <param name="heightScale">Scale of image height as a percentage.</param>
            <returns>The newly added picture.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelPicturesCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelPicturesCollection.RemovePicture(System.Int32)">
            <summary>
            Removes the picture at the specified zero based index from collection
            </summary>
            <param name="pictureIndex">The zero based index of the picture to be removed from collection.</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicturesCollection.Item(System.Int32)">
            <summary>
            Gets the picture at the specified index from collection.
            </summary>
            <param name="pictureIndex">The zero based index of the picture in collection.</param>
            <returns>The picture at the specified index in collection.</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicturesCollection.Count">
            <summary>
            Gets the number of pictures in this collection.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelPagePrintOrder">
            <summary>
            Specifies the order in which cells are processed. 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePrintOrder.DownThenOver">
            <summary>
            Process down the rows before processing across pages or page fields to the right.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePrintOrder.OverThenDown">
            <summary>
            Process across pages or page fields to the right before moving down the rows.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelNamedRangesCollection">
            <summary>
            Represents a collection of named ranges. The ExcelWorksheet and ExcelWorkbook define such collections.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelNamedRangesCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelNamedRangesCollection.AddNamedRange(Winnovative.ExcelLib.ExcelRange,System.String)">
            <summary>
            Creates and adds a new named range to the collection.
            </summary>
            <param name="referencedRange">The referenced ExcelRange.</param>
            <param name="name">The name of the new named range.</param>
            <returns>The newly created named range.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelNamedRangesCollection.RemoveNamedRange(System.Int32)">
            <summary>
            Removes the named range at the specified zero based index from collection.
            </summary>
            <param name="namedRangeIndex">The zero based index in collection from where to remove the named range.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelNamedRangesCollection.RemoveNamedRange(System.String)">
            <summary>
            Removes the named range with the specified name from collection.
            </summary>
            <param name="name">The name of the named range to be removed.</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelNamedRangesCollection.Item(System.Int32)">
            <summary>
            Gets the named range at the specified index. 
            </summary>
            <param name="namedRangeIndex">A zero based index in the named ranges collection</param>
            <returns>The named range at the specified index</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelNamedRangesCollection.Item(System.String)">
            <summary>
            Gets the named range with the specified name from collection. 
            </summary>
            <param name="rangeName">The name of the range to be retrieved from collection.</param>
            <returns>The named range with the specified name or null if no named range with the specified name was found in collection.</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelNamedRangesCollection.Count">
            <summary>
            Gets the number of named ranges in collection.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartTimeUnit">
            <summary>
            Represents the time unit for category axis
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartTimeUnit.Days">
            <summary>
            The time unit is a day.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartTimeUnit.Months">
            <summary>
            The time unit is a month.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartTimeUnit.Years">
            <summary>
            The time units is a year.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartLineWeightType">
            <summary>
            Represents the weight of a chart border line
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLineWeightType.HairLine">
             <summary>
            Hair line weight.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLineWeightType.SingleLine">
             <summary>
            Single line weight.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLineWeightType.MediumLine">
             <summary>
            Medium line weight.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLineWeightType.WideLine">
             <summary>
            Wide line weiht.
             </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartCategoryAxis">
            <summary>
            Represents the category axis (horizontal axis) of a chart
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.CategoryNamesRange">
            <summary>
            Gets or sets the range from where the category names are taken.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.CategoryAxisType">
            <summary>
            Gets or sets the category axis type. The default type is AutomaticScale.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.CategoryLabelsInterval">
            <summary>
            Gets or sets the number of categories between labels on category axis. Set this property with 1 to display a label for every category, 
            2 to display a label for every other category, 3 to display a label for every third category, and so on
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.TickMarksInterval">
            <summary>
            Gets or sets the number of categories between tick marks on category axis. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.CategoryLabelsPosition">
            <summary>
            Gets or sets the category axis labels position. Default value is NextToAxis.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.CategoryLabelsRotation">
            <summary>
            Gets or sets the rotation angle of the axis labels as a value between -90 and 90. A positive value will rotate the 
            labels clockwise and the negative values will rotate the text counter-clockwise.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.MinorGridLinesStyle">
            <summary>
            Gets the category axis minor grid lines. The returned object can be used to set the category axis minor grid lines 
            color, dash type and weight.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.MajorGridLinesStyle">
            <summary>
            Gets the category axis major grid lines. The returned object can be used to set the category axis major grid lines 
            color, dash type and weight.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.ShowMinorGridLines">
            <summary>
            Gets or sets a flag indicating if the minor grid lines are displayed in chart. The default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.ShowMajorGridLines">
            <summary>
            Gets or sets a flag indicating if the minor grid lines are displayed in chart. The default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.MinorTickMarkType">
            <summary>
            Gets or sets the minor tick marks type
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.MajorTickMarkType">
            <summary>
            Gets or sets the minor tick marks type
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.LineStyle">
            <summary>
            Gets the category axis line style.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.Title">
            <summary>
            Gets the category axis title box. The returned object can be used to set the title text, font, color, background and pattern.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.Font">
            <summary>
            Gets the category axis font. The returned object can be used to set the properties of the Font used for
            the cateory axis labels.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.CategoriesInReverseOrder">
            <summary>
            Gets or sets a flag indicating if the cateories are plotted in reverse order on the category axis.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.BaseTimeUnitScale">
            <summary>
            Gets or sets the base unit scale for the category axis. It is used only when the CategoryAxisType is TimeScale.
            The default value is Days.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.MajorTimeUnitScale">
            <summary>
            Gets or sets the major unit scale for the category axis. It is used when the CategoryAxisType is TimeScale.
            The default value is Days.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.MinorTimeUnitScale">
            <summary>
            Gets or sets the minor unit scale for the category axis. It is used when the CategoryAxisType is TimeScale.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartCategoryAxis.AutoBaseTimeUnitScale">
            <summary>
            Gets or sets a flag indicating if the base unit is automatically selected for the category axis. 
            It is used when the CategoryAxisType is TimeScale.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelWorksheetsCollection">
            <summary>
            Represents the collection of Excel worksheets in a workbook
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelWorksheetsCollection.workbook">
            <summary>
            The parent workbook
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheetsCollection.GetEnumerator">
            <summary>
            Gets the worksheets collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheetsCollection.AddWorksheet">
            <summary>
            Adds a new worksheet to the worksheets collection
            </summary>
            <returns>The newly created worksheet</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheetsCollection.AddWorksheet(System.String)">
            <summary>
            Adds a new worksheet with the specified name to the worksheets collection
            </summary>
            <param name="worksheetName">The new worksheet name</param>
            <returns>The newly created worksheet</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheetsCollection.RemoveWorksheet(Winnovative.ExcelLib.ExcelWorksheet)">
            <summary>
            Removes the specified worksheet from collection
            </summary>
            <param name="worksheet">The worksheet to be removed.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheetsCollection.RemoveWorksheet(System.String)">
            <summary>
            Removes the the worksheet with the specified name from collection
            </summary>
            <param name="worksheetName">The name of the worksheet to be removed.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheetsCollection.RemoveWorksheet(System.Int32)">
            <summary>
            Removes the worksheet at the specified zero based index from collection.
            </summary>
            <param name="worksheetIndex">The zero based index of the worksheet to be removed from collection.</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetsCollection.Count">
            <summary>
            Gets the number of worksheets in the collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetsCollection.Item(System.Int32)">
            <summary>
            Gets the worksheet at worksheetIndex from the collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetsCollection.Item(System.String)">
            <summary>
            Gets the worksheet with the specified name from the collection.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelShapeFillSolid">
            <summary>
            Represents the solid fill for a shape interior.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillSolid.BackColor">
            <summary>
            Gets or sets the background color of the interior. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillSolid.BackColorIndex">
            <summary>
            Gets or sets the index in Excel palette of background color of the interior.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings">
            <summary>
            A class encapsulating the default options (font, row height, column width) for a newly created workbook.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings.DefaultFontName">
            <summary>
            Gets or sets default font name for the newly created worksheets.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings.DefaultFontSize">
            <summary>
            Gets or sets default font size in points for the newly created worksheets.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings.DefaultRowHeightPoints">
            <summary>
            Gets or sets default row height in points for the newly created worksheets.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings.DefaultColumnWidthChars">
            <summary>
            Gets or sets default column width in characters for the newly created worksheets.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings.SerializeDefaultRowHeight">
            <summary>
            A flag indicating if the DefaultRowHeightPoints property should be serialized or not when the the format is Xlsx_2007.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings.SerializeDefaultColumnWidth">
            <summary>
            A flag indicating if the DefaultRowHeightPoints property should be serialized or not when the the format is Xls_2007.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings.FullTrustAllowed">
            <summary>
            Gets or sets a global flag indicating if the ASP.NET Full Trust level can be granted to the library at runtime.
            This property has effect only if AutoTrustLevel is false.
            The default value is true and therefore the library assumes it can  run in full trust mode. In full trust mode
            the library can run some speed optimizations to deliver the best performance.
            Full Trust level is the default level assigned by ASP.NET to the web applications. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings.AutoTrustLevel">
            <summary>
            Gets or sets a flag indication if the library should automatically determine the trust level in an ASP.NET 
            environment in order to offer the best performance. Default value is true. When this property is false 
            the trust level is given by the FullTrustAllowed property.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings.FormulaRowsSeparator">
            <summary>
            Gets or sets the rows separator used when parsing arrays in formulas. Set this propery before assigning
            a formula expression to a cell. The default value is ';'
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings.FormulaParamsSeparator">
            <summary>
            Gets or sets the separator between formula parameters used when parsing formulas. Set this propery before assigning
            a formula expression to a cell. The defaulr value is ','.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings.FormulaNumberFormat">
            <summary>
            Gets or sets the number format in formula used when parsing formulas. Set this propery before assigning
            a formula expression to a cell. The default value is the number format for the current culture.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorkbookDefaultSettings.ParseCSVStrings">
            <summary>
            Gets or sets a flag indicating if the strings from a CSV file are parsed to produce cells containing numbers,
            dates or booleans. Default value is true.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelPageBreakType">
            <summary>
            Represents the type of pae break (horizontal or vertical).
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPageBreakType.Horizontal">
            <summary>
            Horizontal page break
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPageBreakType.Vertical">
            <summary>
            Vertical page break
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelDeleteShiftDirection">
            <summary>
            Describes how the cells are shifted to replace deleted cells.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDeleteShiftDirection.ShiftLeft">
            <summary>
            Cells are shifted to the left
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDeleteShiftDirection.ShiftUp">
            <summary>
            Cells are shifted up
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelFont">
            <summary>
            Represents a font in the Excel workbook
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelFont.Size">
            <summary>
            Gets or sets the size of the font. Default size is 10.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelFont.Name">
            <summary>
            Gets or sets the name of the font family. Default font is Arial.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelFont.Color">
            <summary>
            Gets or sets the font color.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelFont.ColorIndex">
            <summary>
            Gets or sets the the index in Excel palette of color of this font.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelFont.Bold">
            <summary>
            Gets or sets a value to indicate if the font is bold or not. Default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelFont.Italic">
            <summary>
            Gets or sets a value to indicate if the font is bold or not. Default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelFont.IsStrikethrough">
            <summary>
            Gets or sets a value to indicate if the font is struck through horizontally. Default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelFont.IsSubscript">
            <summary>
            Gets or sets a value to indicate if the font is formatted as subscript. Default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelFont.IsSuperscript">
            <summary>
            Gets or sets a value to indicate if the font is formatted as superscript. Default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelFont.UnderlineType">
            <summary>
            Gets or sets a value to indicating the underline type. If the underline type is None, no underline will be applied. The default 
            value is None.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelDocumentProperties">
            <summary>
            The document properties like title, subject, keywords, author, etc.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.Title">
            <summary>
            Gets or sets the document title.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.Subject">
            <summary>
            Gets or sets the document subject.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.Author">
            <summary>
            Gets or sets the document author.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.Keywords">
            <summary>
            Gets or sets the document keywords.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.Comments">
            <summary>
            Gets or sets the document comments.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.Template">
            <summary>
            Gets or sets the document template.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.LastAuthor">
            <summary>
            Gets or sets the document last author.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.RevisionNumber">
            <summary>
            Gets or sets the document revision number.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.TotalEditingTime">
            <summary>
            Gets or sets the total editing time of the document.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.LastPrintDate">
            <summary>
            Gets or sets the last print date of the document.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.CreationDate">
            <summary>
            Gets or sets the document creation date.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.LastSaveTime">
            <summary>
            Gets or sets the document last save time.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.PagesNumber">
            <summary>
            Gets or sets the number of pages in document.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.WordsNumber">
            <summary>
            Gets or sets the number of words in document.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.CharsNumber">
            <summary>
            Gets or sets the number of characters in document.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.ApplicationName">
            <summary>
            Gets or sets the name of the application that created the document.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.Category">
            <summary>
            Gets or sets the document category.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.BytesNumber">
            <summary>
            Gets or sets the number of bytes in document.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.LinesNumber">
            <summary>
            Gets or sets the number of lines in document
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.ParagraphsNumber">
            <summary>
            Gets or sets the number of paragraphs in document
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.SlidesNumber">
            <summary>
            Gets or sets the document number od slides
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.NotesNumber">
            <summary>
            Gets or sets the number of notes in document
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.HiddenSlidesNumber">
            <summary>
            Gets or sets the number of hidden slides in document.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.MultimediaClipsNumber">
            <summary>
            Gets or sets the number of multimedia clips in document.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.Manager">
            <summary>
            Gets or sets the document manager.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentProperties.Company">
            <summary>
            Gets or sets the document company.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelDataValidatorOperator">
            <summary>
            Represents a comparison operator used by a data validator.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorOperator.Between">
            <summary>
            Between operator.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorOperator.NotBetween">
            <summary>
            Not Between operator.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorOperator.EqualTo">
            <summary>
            Equal To Operator.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorOperator.NotEqualTo">
             <summary>
            Not Equal To operator.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorOperator.GreaterThan">
             <summary>
            Greater Than operator.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorOperator.LessThan">
             <summary>
            Less Than operator.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorOperator.GreaterThanOrEqualTo">
             <summary>
            Greater Than Or Equal To operator.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorOperator.LessThanOrEqual">
             <summary>
            Less Than Or Equal To operator.
             </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartWorksheetPageSetup">
            <summary>
            Represents the chart worksheet page setup
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelPageSetup">
            <summary>
            Represents the Excel page setup.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.BottomMargin">
            <summary>
            Gets or sets the bottom margin size in inches.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.TopMargin">
            <summary>
            Gets or sets the top margin size in inches.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.LeftMargin">
            <summary>
            Gets or sets the left margin size in inches.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.RightMargin">
            <summary>
            Gets or sets the right margin size in inches.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.CenterFooterFormat">
            <summary>
            Gets or sets the format of the center part of the footer. Formatting and VBA codes for headers and footers are below.
            &amp;L - Left aligns the characters that follow. 
            &amp;C - Centers the characters that follow. 
            &amp;R - Right aligns the characters that follow. 
            &amp;E - Turns double-underline printing on or off. 
            &amp;X - Turns superscript printing on or off. 
            &amp;Y - Turns subscript printing on or off. 
            &amp;B - Turns bold printing on or off. 
            &amp;I - Turns italic printing on or off. 
            &amp;U - Turns underline printing on or off. 
            &amp;S - Turns strikethrough printing on or off. 
            &amp;"fontname" - Prints the characters that follow in the specified font. Be sure to include the double quotation marks. 
            &amp;nn - Prints the characters that follow in the specified font size. Use a two-digit number to specify a size in points. 
            &amp;color - Prints the characters in the specified color. User supplies a hexidecimal color value. 
            &amp;D - Prints the current date. 
            &amp;T - Prints the current time. 
            &amp;F - Prints the name of the document. 
            &amp;A - Prints the name of the workbook tab. 
            &amp;P - Prints the page number. 
            &amp;P+number - Prints the page number plus the specified number. 
            &amp;P-number - Prints the page number minus the specified number. 
            &amp;&amp; - Prints a single ampersand. 
            &amp;N - Prints the total number of pages in the document.  
            &amp;Z - Prints the file path. 
            &amp;G - Inserts an image. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.CenterFooterPicture">
            <summary>
            Gets or sets the image displayed in the center part of the footer.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.CenterHeaderFormat">
            <summary>
            Gets or sets the format the center part of the header. Formatting and VBA codes for headers and footers are below.
            &amp;L - Left aligns the characters that follow. 
            &amp;C - Centers the characters that follow. 
            &amp;R - Right aligns the characters that follow. 
            &amp;E - Turns double-underline printing on or off. 
            &amp;X - Turns superscript printing on or off. 
            &amp;Y - Turns subscript printing on or off. 
            &amp;B - Turns bold printing on or off. 
            &amp;I - Turns italic printing on or off. 
            &amp;U - Turns underline printing on or off. 
            &amp;S - Turns strikethrough printing on or off. 
            &amp;"fontname" - Prints the characters that follow in the specified font. Be sure to include the double quotation marks. 
            &amp;nn - Prints the characters that follow in the specified font size. Use a two-digit number to specify a size in points. 
            &amp;color - Prints the characters in the specified color. User supplies a hexidecimal color value. 
            &amp;D - Prints the current date. 
            &amp;T - Prints the current time. 
            &amp;F - Prints the name of the document. 
            &amp;A - Prints the name of the workbook tab. 
            &amp;P - Prints the page number. 
            &amp;P+number - Prints the page number plus the specified number. 
            &amp;P-number - Prints the page number minus the specified number. 
            &amp;&amp; - Prints a single ampersand. 
            &amp;N - Prints the total number of pages in the document.  
            &amp;Z - Prints the file path. 
            &amp;G - Inserts an image. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.CenterHeaderPicture">
            <summary>
            Gets or sets the image displayed in the center part of the header.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.LeftFooterFormat">
            <summary>
            Gets or sets the format of the left part of the footer. Formatting and VBA codes for headers and footers are below.
            &amp;L - Left aligns the characters that follow. 
            &amp;C - Centers the characters that follow. 
            &amp;R - Right aligns the characters that follow. 
            &amp;E - Turns double-underline printing on or off. 
            &amp;X - Turns superscript printing on or off. 
            &amp;Y - Turns subscript printing on or off. 
            &amp;B - Turns bold printing on or off. 
            &amp;I - Turns italic printing on or off. 
            &amp;U - Turns underline printing on or off. 
            &amp;S - Turns strikethrough printing on or off. 
            &amp;"fontname" - Prints the characters that follow in the specified font. Be sure to include the double quotation marks. 
            &amp;nn - Prints the characters that follow in the specified font size. Use a two-digit number to specify a size in points. 
            &amp;color - Prints the characters in the specified color. User supplies a hexidecimal color value. 
            &amp;D - Prints the current date. 
            &amp;T - Prints the current time. 
            &amp;F - Prints the name of the document. 
            &amp;A - Prints the name of the workbook tab. 
            &amp;P - Prints the page number. 
            &amp;P+number - Prints the page number plus the specified number. 
            &amp;P-number - Prints the page number minus the specified number. 
            &amp;&amp; - Prints a single ampersand. 
            &amp;N - Prints the total number of pages in the document.  
            &amp;Z - Prints the file path. 
            &amp;G - Inserts an image. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.LeftFooterPicture">
            <summary>
            Gets or sets the image displayed in the left part of the footer.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.LeftHeaderFormat">
            <summary>
            Gets or sets the format of the left part of the header. Formatting and VBA codes for headers and footers are below.
            &amp;L - Left aligns the characters that follow. 
            &amp;C - Centers the characters that follow. 
            &amp;R - Right aligns the characters that follow. 
            &amp;E - Turns double-underline printing on or off. 
            &amp;X - Turns superscript printing on or off. 
            &amp;Y - Turns subscript printing on or off. 
            &amp;B - Turns bold printing on or off. 
            &amp;I - Turns italic printing on or off. 
            &amp;U - Turns underline printing on or off. 
            &amp;S - Turns strikethrough printing on or off. 
            &amp;"fontname" - Prints the characters that follow in the specified font. Be sure to include the double quotation marks. 
            &amp;nn - Prints the characters that follow in the specified font size. Use a two-digit number to specify a size in points. 
            &amp;color - Prints the characters in the specified color. User supplies a hexidecimal color value. 
            &amp;D - Prints the current date. 
            &amp;T - Prints the current time. 
            &amp;F - Prints the name of the document. 
            &amp;A - Prints the name of the workbook tab. 
            &amp;P - Prints the page number. 
            &amp;P+number - Prints the page number plus the specified number. 
            &amp;P-number - Prints the page number minus the specified number. 
            &amp;&amp; - Prints a single ampersand. 
            &amp;N - Prints the total number of pages in the document.  
            &amp;Z - Prints the file path. 
            &amp;G - Inserts an image. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.LeftHeaderPicture">
            <summary>
            Gets or sets the image displayed in the left part of the header.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.RightFooterFormat">
            <summary>
            Gets or sets the format of the right part of the footer. Formatting and VBA codes for headers and footers are below.
            &amp;L - Left aligns the characters that follow. 
            &amp;C - Centers the characters that follow. 
            &amp;R - Right aligns the characters that follow. 
            &amp;E - Turns double-underline printing on or off. 
            &amp;X - Turns superscript printing on or off. 
            &amp;Y - Turns subscript printing on or off. 
            &amp;B - Turns bold printing on or off. 
            &amp;I - Turns italic printing on or off. 
            &amp;U - Turns underline printing on or off. 
            &amp;S - Turns strikethrough printing on or off. 
            &amp;"fontname" - Prints the characters that follow in the specified font. Be sure to include the double quotation marks. 
            &amp;nn - Prints the characters that follow in the specified font size. Use a two-digit number to specify a size in points. 
            &amp;color - Prints the characters in the specified color. User supplies a hexidecimal color value. 
            &amp;D - Prints the current date. 
            &amp;T - Prints the current time. 
            &amp;F - Prints the name of the document. 
            &amp;A - Prints the name of the workbook tab. 
            &amp;P - Prints the page number. 
            &amp;P+number - Prints the page number plus the specified number. 
            &amp;P-number - Prints the page number minus the specified number. 
            &amp;&amp; - Prints a single ampersand. 
            &amp;N - Prints the total number of pages in the document.  
            &amp;Z - Prints the file path. 
            &amp;G - Inserts an image. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.RightFooterPicture">
            <summary>
            Gets or sets the image displayed in the right part of the footer.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.RightHeaderFormat">
            <summary>
            Gets or sets the format of the right part of the header. Formatting and VBA codes for headers and footers are below.
            &amp;L - Left aligns the characters that follow. 
            &amp;C - Centers the characters that follow. 
            &amp;R - Right aligns the characters that follow. 
            &amp;E - Turns double-underline printing on or off. 
            &amp;X - Turns superscript printing on or off. 
            &amp;Y - Turns subscript printing on or off. 
            &amp;B - Turns bold printing on or off. 
            &amp;I - Turns italic printing on or off. 
            &amp;U - Turns underline printing on or off. 
            &amp;S - Turns strikethrough printing on or off. 
            &amp;"fontname" - Prints the characters that follow in the specified font. Be sure to include the double quotation marks. 
            &amp;nn - Prints the characters that follow in the specified font size. Use a two-digit number to specify a size in points. 
            &amp;color - Prints the characters in the specified color. User supplies a hexidecimal color value. 
            &amp;D - Prints the current date. 
            &amp;T - Prints the current time. 
            &amp;F - Prints the name of the document. 
            &amp;A - Prints the name of the workbook tab. 
            &amp;P - Prints the page number. 
            &amp;P+number - Prints the page number plus the specified number. 
            &amp;P-number - Prints the page number minus the specified number. 
            &amp;&amp; - Prints a single ampersand. 
            &amp;N - Prints the total number of pages in the document.  
            &amp;Z - Prints the file path. 
            &amp;G - Inserts an image. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.RightHeaderPicture">
            <summary>
            Gets or sets the image displayed in the right part of the header.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.CenterHorizontally">
            <summary>
            Gets or sets indicating if the sheet is centered horizonally.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.CenterVertically">
            <summary>
            Gets or sets indicating if the sheet is centered vertically.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.PrintBlackAndWhite">
            <summary>
            Gets or sets a flag indicating if the page will be printed in black and white.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.PrintCopiesNumber">
            <summary>
            Gets or sets the number of copies to print.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.PrintDraftMode">
            <summary>
            Gets or sets a flag indicating if the page will be printed in draft mode.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.PrintFirstPageNumber">
            <summary>
            Gets or sets the first page number printing. This property has effect if the PrintFirstPageNumberAuto is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.PrintFirstPageNumberAuto">
            <summary>
            Gets or sets a flag indicating if the first page number is automatically selected by Excel viewer. If this property is false
            the first page number is given by the PrintFirstPageNumber property.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.FooterMargin">
            <summary>
            Gets or sets the distance from the bottom of the page to the footer in inches. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.HeaderMargin">
            <summary>
            Gets or sets the distance from the top of the page to the header in inches.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.Orientation">
            <summary>
            Gets or sets the page orientation to portrait or landscape mode.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.PaperSize">
            <summary>
            Gets or sets the page paper size.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.PrintOrder">
            <summary>
            Gets or sets the order used to number pages when printing a large worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageSetup.PrintQuality">
            <summary>
            Gets or sets the print quality in dpi.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheetPageSetup.BackgroundPicture">
            <summary>
            Gets or sets the background picture of the worksheet.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartType">
            <summary>
            Enumeration of the Chart types in Excel.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Area3D">
            <summary>
            3D Area 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Area3DStacked">
            <summary>
            3D Stacked Area
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Area3DStacked100">
            <summary>
            100% Stacked Area 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Bar3DClustered">
            <summary>
            3D Clustered Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Bar3DStacked">
            <summary>
            3D Stacked Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Bar3DStacked100">
            <summary>
            3D 100% Stacked Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Column3D">
            <summary>
            3D Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Column3DClustered">
            <summary>
            3D Clustered Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Column3DStacked">
            <summary>
            3D Stacked Column  
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Column3DStacked100">
            <summary>
            3D 100% Stacked Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Line3D">
            <summary>
            3D Line
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Pie3D">
            <summary>
            3D Pie 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.PieExploded3D">
            <summary>
            Exploded 3D Pie 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Area">
            <summary>
            Area 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.AreaStacked">
            <summary>
            Stacked Area
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.AreaStacked100">
            <summary>
            100% Stacked Area 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.BarClustered">
            <summary>
            Clustered Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.BarOfPie">
            <summary>
            Bar of Pie
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.BarStacked">
            <summary>
            Stacked Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.BarStacked100">
            <summary>
            100% Stacked Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.ColumnClustered">
            <summary>
            Clustered Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.ColumnStacked">
            <summary>
            Stacked Column
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.ColumnStacked100">
            <summary>
            100% Stacked Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.ConeBarClustered">
            <summary>
            Clustered Cone Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.ConeBarStacked">
            <summary>
            Stacked Cone Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.ConeBarStacked100">
            <summary>
            100% Stacked Cone Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Cone3DCol">
            <summary>
            3D Cone Column  
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.ConeColClustered">
            <summary>
            Clustered Cone Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.ConeColStacked">
            <summary>
            Stacked Cone Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.ConeColStacked100">
            <summary>
            100% Stacked Cone Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.CylinderBarClustered">
            <summary>
            Clustered Cylinder Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.CylinderBarStacked">
            <summary>
            Stacked Cylinder Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.CylinderBarStacked100">
            <summary>
            100% Stacked Cylinder Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Cylinder3DCol">
            <summary>
            3D Cylinder Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.CylinderColClustered">
            <summary>
            Clustered Cone Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.CylinderColStacked">
            <summary>
            Stacked Cone Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.CylinderColStacked100">
            <summary>
            100% Stacked Cylinder Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Doughnut">
            <summary>
            Doughnut
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.DoughnutExploded">
            <summary>
            Exploded Doughnut 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Line">
            <summary>
            Line 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.LineMarkers">
            <summary>
            Line with Markers 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.LineMarkersStacked">
            <summary>
            Stacked Line with Markers 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.LineMarkersStacked100">
            <summary>
            100% Stacked Line with Markers 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.LineStacked">
            <summary>
            Stacked Line
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.LineStacked100">
            <summary>
            100% Stacked Line 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Pie">
            <summary>
            Pie 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.PieExploded">
            <summary>
            Exploded Pie 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.PieOfPie">
            <summary>
            Pie of Pie
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.PyramidBarClustered">
            <summary>
            Clustered Pyramid Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.PyramidBarStacked">
            <summary>
            Stacked Pyramid Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.PyramidBarStacked100">
            <summary>
            100% Stacked Pyramid Bar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Pyramid3DCol">
            <summary>
            3D Pyramid Column
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.PyramidColClustered">
            <summary>
            Clustered Pyramid Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.PyramidColStacked">
            <summary>
            Stacked Pyramid Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.PyramidColStacked100">
            <summary>
            100% Stacked Pyramid Column 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.Radar">
            <summary>
            Radar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.RadarFilled">
            <summary>
            Filled Radar 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.RadarMarkers">
            <summary>
            Radar with Data Markers 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.StockHLC">
            <summary>
            High-Low-Close 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.StockOHLC">
            <summary>
            Open-High-Low-Close 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.StockVHLC">
            <summary>
            Volume-High-Low-Close 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.StockVOHLC">
            <summary>
            Volume-Open-High-Low-Close 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.XYScatter">
            <summary>
            Scatter 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.XYScatterLines">
            <summary>
            Scatter with Lines
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.XYScatterLinesNoMarkers">
            <summary>
            Scatter with Lines and No Data Markers 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.XYScatterSmooth">
            <summary>
            Scatter with Smoothed Lines 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartType.XYScatterSmoothNoMarkers">
            <summary>
            Scatter with Smoothed Lines and No Data Markers 
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartCategoryAxisType">
            <summary>
            Represents the type of the category axis of a chart
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartCategoryAxisType.AutomaticScale">
            <summary>
            The axis type is automatically controlled. 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartCategoryAxisType.CategoryScale">
            <summary>
            Axis groups data by an arbitrary set of categories. 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartCategoryAxisType.TimeScale">
            <summary>
            Axis groups data on a time scale. 
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartLegend">
            <summary>
            Represents the legend of a chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLegend.Border">
            <summary>
            Gets the chart legend border. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLegend.Interior">
            <summary>
            Gets the chart legend interior. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLegend.Font">
            <summary>
            Gets the font of the legend text.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLegend.Position">
            <summary>
            Gets or sets the legend position inside the chart area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLegend.LegendEntries">
            <summary>
            Gets the legend entries collection.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellAlignment">
            <summary>
            Represents the alignment style options of the text in a cell.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellAlignment.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text in cells.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellAlignment.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text in cells.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellAlignment.Direction">
            <summary>
            Gets or sets the direction of the text in cells. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellAlignment.Orientation">
            <summary>
            Gets or sets the orientation of the cell text as a value between -90 and 90 degrees.  
            90 means the content is rotated 90 degrees counter-clockwise.
            -90 means the content is rotated 90 degrees clockwise.
            0 means the content is not rotated. Default value is 0.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellAlignment.Indent">
            <summary>
            Gets or sets the indent level of the cell. Each increment in the Indent is equivalent to the width of one character.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellAlignment.WrapText">
            <summary>
            Indicates if the Excel viewer will wrap the cell text
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellAlignment.ShrinkToFit">
            <summary>
            Gets or sets a value to indicate if the text automatically shrinks to fit in the available column width.
            When true the text can shrink. Default value is false.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellBordersCollection">
            <summary>
            Represents a collection of four borders of a Range or a Style. A border index can be used to identify the 
            Border object
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellBordersCollection.Color">
            <summary>
            Gets or sets the color of the borders
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellBordersCollection.LineStyle">
            <summary>
            Gets or sets line style for all the cell borders.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellBordersCollection.Count">
            <summary>
            Gets the number of borders in the collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellBordersCollection.Item(Winnovative.ExcelLib.ExcelCellBorderIndex)">
            <summary>
            Returns the border object at the specified index from collection. 
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellBorderIndex">
            <summary>
            Specifies the index of the border to be retrieved from a borders collection.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellBorderIndex.Top">
            <summary>
            Border at the top of the range
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellBorderIndex.Right">
            <summary>
            Border at the right-hand edge of the range
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellBorderIndex.Bottom">
            <summary>
            Border at the bottom of the range. 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellBorderIndex.Left">
            <summary>
            Border at the left-hand edge of the range. 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellBorderIndex.DiagonalDown">
            <summary>
            Border running from the upper left-hand corner to the lower right of each cell in the range. 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellBorderIndex.DiagonalUp">
            <summary>
            Border running from the lower left-hand corner to the upper right of each cell in the range.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelColorsPalette">
            <summary>
            Represents the Excel colors palette.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelColorsPalette.GetColors">
            <summary>
            Gets the current palette colors
            </summary>
            <returns>The palette colors</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelColorsPalette.Reset">
            <summary>
            Set the default colors for the palette
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelColorsPalette.GetColorIndex(System.Drawing.Color)">
            <summary>
            Gets the index in palette of the specified color. If the exact color is not found in the palette the 
            method will return the index of the color in palette which is the closest to the specified color.
            </summary>
            <param name="color">The color to search in palette</param>
            <returns>The index of the specified color in palette</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelColorsPalette.AddColor(System.Drawing.Color)">
            <summary>
            Adds the specified color to palette and returns the index in palette where this color was added. 
            If there are no more available indexes in the palette the method will return the index 
            of the color in palette which is the closest to the specified color.
            </summary>
            <param name="color">The color to be added to the palette.</param>
            <returns>The index in palette where this color was added.</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelColorsPalette.Item(System.Int32)">
            <summary>
            Gets or sets the color from the specified index in palette
            </summary>
            <param name="colorIndex">The color index in palette</param>
            <returns>The color at the specified index in palette</returns>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartWorksheet">
            <summary>
            Represents a chart worksheet.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartWorksheet.Activate">
            <summary>
            Makes this chart worksheet the active worksheet of the workbook.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.Workbook">
            <summary>
            Gets the workbook of this chart worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.Name">
            <summary>
            Gets or sets the name of chart worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.SheetIndex">
            <summary>
            Gets the index of this chart worksheet in the workbook sheets collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.DataSourceRange">
            <summary>
            Gets or sets the data source range of the chart
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.ChartType">
            <summary>
            Gets or sets the chart type
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.SeriesByRows">
            <summary>
            Gets or sets a flag indicating if the chart series are created from the data source range rows or columns.
            The data source range can be specified when the chart is added to the worksheet. 
            When this flag is true the series are created from rows otherwise from columns.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.CategoryAxis">
            <summary>
            Gets the category axis of this chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.ValueAxis">
            <summary>
            Gets the value axis of this chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.SeriesAxis">
            <summary>
            Gets the series axis of this chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.Series">
            <summary>
            Gets the data series collection of this chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.Title">
            <summary>
            Gets the chart title box. The returned object can be used to set the chart title text, font, color, background and pattern.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.ChartArea">
            <summary>
            Gets the chart area. The returned object can be used to set the border and the interior of the chart area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.PlotArea">
            <summary>
            Gets the chart plot area. The returned object can be used to set the border and the interior of the chart plot area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.ShowDataTable">
            <summary>
            Gets or sets a flag indicating if the chart data table is displayed.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.DataTable">
            <summary>
            Gets an object that can be used to set the chart data table options.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.Legend">
            <summary>
            Gets the chart legend.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.PageSetup">
            <summary>
            Gets the chart worksheet page setup options (paper size, page orientation, etc.).
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheet.Rotation3D">
            <summary>
            Gets the 3D chart rotation properties. The returned object can be used to set the X and Y axes rotation, perspective, depth and height of a 3D chart.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellProtection">
            <summary>
            Represents the protection options for a cell or a range of cells.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellProtection.HiddenFormula">
            <summary>
            A flag indicating if the formula is hidden when the worksheet is protected. This property is applied only when the worksheet is protected. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellProtection.Locked">
            <summary>
            Gets or sets a flag indicating if the cell or range is locked. This property is applied only when the worksheet is protected. 
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellFillPattern">
            <summary>
            Represents the pattern fill of a cell interior
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillPattern.PatternColor">
            <summary>
            Gets or sets the color of the interior pattern. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillPattern.PatternColorIndex">
            <summary>
            Gets or sets the color index in Excel palette of the cell pattern.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillPattern.BackColor">
            <summary>
            Gets or sets the background color of the cell.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillPattern.BackColorIndex">
            <summary>
            Gets or sets the index in Excel palette of background color of the cell.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillPattern.PatternType">
            <summary>
            Gets or sets the cell interior pattern type.  
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelWorkbookFormat">
            <summary>
            The Excel workbook format
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelWorkbookFormat.Xls_2003">
            <summary>
            Excel 97-2003 format (.xls)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelWorkbookFormat.Xlsx_2007">
            <summary>
            Excel 2007 format (.xlsx)
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCommentsCollection">
            <summary>
            Represents a collection of comments in a worksheet
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelCommentsCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCommentsCollection.Item(System.Int32)">
            <summary>
            Gets the comment at the specified index from collection.
            </summary>
            <param name="commentIndex">The zero based index of the comment in collection.</param>
            <returns>The comment at the specified index in collection.</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCommentsCollection.Count">
            <summary>
            Gets the number of commments in this collection.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartInterior">
            <summary>
            Represents the interior of a chart element
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelShapeFill">
            <summary>
            Represents the interior of a shape
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFill.psf">
            <summary>
            
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelShapeFill.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFill.FillType">
            <summary>
            Gets or sets the shape fill type. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFill.SolidFillOptions">
            <summary>
            Gets the solid fill options object for the interior. This property returns a null object if the InteriorType is not SolidFill.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFill.PatternFillOptions">
            <summary>
            Gets the pattern options object for the interior. This property returns a null object if the InteriorType is not PatternFill.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFill.GradientFillOptions">
            <summary>
            Gets the gradient options object for the interior. This property returns a null object if the InteriorType is not GradientFill.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFill.PictureFillOptions">
            <summary>
            Gets the picture fill options object for the interior. This property returns a null object if the InteriorType is not PictureFill.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFill.TextureFillOptions">
            <summary>
            Gets the gradient options object for the interior. This property returns a null object if the InteriorType is not GradientFill.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellStylesCollection">
            <summary>
            Represents a collection of cell styles. The ExcelWorkbook offers such a collection containing all the styles created in the workbook.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelCellStylesCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelCellStylesCollection.AddStyle(System.String)">
            <summary>
            Adds a new style to the styles collection.
            </summary>
            <param name="styleName">The name of style to create.</param>
            <returns>The newly created style</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelCellStylesCollection.RemoveStyle(System.String)">
            <summary>
            Removes the style with the specified name from collection.
            </summary>
            <param name="styleName">The name of the style to be removed.</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellStylesCollection.Count">
            <summary>
            Gets the number of styles in collection
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellStylesCollection.Item(System.Int32)">
            <summary>
            Gets the style at the specified index from collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellStylesCollection.Item(System.String)">
            <summary>
            Gets the style with the specified name from collection.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelRange">
            <summary>
            Represents a range of cells in a worksheet 
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.Merge">
            <summary>
            Merge the cells in this range in a merged area.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.UnMerge">
            <summary>
            Separates a merged range into individual cells.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.Clear">
            <summary>
            Clears the range content and the cells formatting
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.ClearContents">
            <summary>
            Clears the range content but leaves the cells formatting
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.Copy(Winnovative.ExcelLib.ExcelRange)">
            <summary>
            Copies this range to the specified destination range.
            </summary>
            <param name="destRange">Destination range</param>
            <returns>The actual range where the source range was copied.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.Delete">
            <summary>
            Deletes the cell in the range and shifts cells up to replace the deleted cells.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.Delete(Winnovative.ExcelLib.ExcelDeleteShiftDirection)">
            <summary>
            Deletes the cell in the range and shifts cells in the specified direction to replace the deleted cells.
            </summary>
            <param name="shiftDirection">Specifies how the cells are shifted to replace deleted cells.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.Group(Winnovative.ExcelLib.ExcelGroupBy)">
            <summary>
            Groups the range by rows or columns function of the groupBy parameter.
            </summary>
            <param name="groupBy">
            Specifies how to group the range, by rows or by columns. 
            </param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.Group(Winnovative.ExcelLib.ExcelGroupBy,System.Boolean)">
            <summary>
            Groups the range by rows or columns function of the groupBy parameter.
            </summary>
            <param name="groupBy">
            Specifies how to group the range, by rows or by columns.  
            </param>
            <param name="collapse">Specifies if the group should be collapsed in viewer.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.UnGroup(Winnovative.ExcelLib.ExcelGroupBy)">
            <summary>
            Ungroups the range.
            </summary>
            <param name="groupBy">Specifies how to ungroup the range, by rows or by columns.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.Move(Winnovative.ExcelLib.ExcelRange)">
            <summary>
            Moves the range to the specified destination range.
            </summary>
            <param name="destRange">Specifies the new range where this range will be moved.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.AutofitColumns">
            <summary>
            Changes the width of the range columns to achieve the best fit for the cells content.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.AutofitRows">
            <summary>
            Changes the height of the range rows to achieve the best fit for the cells content.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.FreezePanes">
            <summary>
            Freezes panes to keep row and column labels visible when the worksheet is scrolled. 
            To lock rows select the row below where you want the freeze to appear (e.g. The range "A5" will freeze the rows from 1 to 4).
            To lock columns select the column to the right of where you want the split to appear (e.g. The range "D1" will freeze the columns A, B and C).
            To lock both rows and columns select the cell below and to the right of where you want the split to appear 
            (e.g. The range "D5" will freeze the rows from 1 to 4 and the columns A, B and C).
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRange.AddComment(System.String)">
            <summary>
            Adds the comment with the specified text to this range. 
            The range is expected to contain a single cell otherwise the comment will be placed on the top left cell of the range.
            </summary>
            <param name="text">The comment text.</param>
            <returns>The comment object attached to the range.</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.Worksheet">
            <summary>
            Gets the worksheet of this range
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.Hyperlinks">
            <summary>
            Gets the collection of hyperlinks of this range
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.Cells">
            <summary>
            Gets the cells in this range.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.LeftColumnIndex">
            <summary>
            Returns the zero based index of the first column of the specified range. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.TopRowIndex">
            <summary>
            Returns the zero based index of the first row of the specified range. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.RightColumnIndex">
            <summary>
            Returns the zero based index of the last column of the specified range. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.BottomRowIndex">
            <summary>
            Returns the zero based index of the last row of the specified range. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.Rows">
            <summary>
            Gets an array of Range objects representing the rows in this specified range.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.Columns">
            <summary>
            Gets an array of ExcelRangeColumn objects representing the columns in this specified range.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.Count">
            <summary>
            Gets the number of cells in range
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.MergeArea">
            <summary>
            Gets a merged Range object containing the specified cell or null if the specified cell 
            is not part of a merged range
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.Value">
            <summary>
            Gets or sets the cell value as an object. The setter will determine the value type (Boolean, DateTime or Number) 
            from the specified object type. If it's not one these types range will be set with a Text value.
            If you simply want to set the range with a text you can use the Text property of the Range object. 
            If you want to set a range with a formula string you can use the Formula or FormulaArray properties.
            If you want to set a range with an Error value you can use the ErrorValue property.
            If you want to disable the parsing of the string values and simply set the cell value to the specified string 
            you can set ExcelWorksheet.ParseValueString = false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.Text">
            <summary>
            Gets or sets the string value of the range. Returns null if the cell does not contain text or 
            the text is not the same in all the rane cells. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.NumberValue">
            <summary>
            Gets or sets the number value of the range. Returns Double.Nan if the range cells don't contain 
            a number or the number value is not the same in all the cells. Setting this property has the same 
            effect as setting the Value property with a Double value.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.DateTimeValue">
            <summary>
            Gets or sets the DateTime value of the range. Returns DateTime.MinValue if the range cells don't contain 
            a DateTime or the DateTime value is not the same in all the cells. Setting this property has the same 
            effect as setting the Value property with a DateTime value.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.BooleanValue">
            <summary>
            Gets or sets the boolean value of the range. Returns false if the range cells don't contain 
            a boolean value or the boolean value is not the same in all the cells. Setting this property has the same 
            effect as setting the Value property with a Boolean value.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.ErrorValue">
            <summary>
            Gets or sets the error of this range. Returns null if the range cells don't contain 
            an error value or the error value is not the same in all the cells. 
            When this property is set with a string value which is not an error string an exception will be thrown.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.Formula">
            <summary>
            Gets or sets the formula of the range in A1 notation. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.FormulaR1C1">
            <summary>
            Gets or sets the formula of the range in R1C1 notation. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.FormulaArray">
            <summary>
            Gets or sets array formula of the range in A1 notation.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.FormulaArrayR1C1">
            <summary>
            Gets or sets array formula of the range in A1 notation.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsString">
            <summary>
            Gets a flag indicating if all the cells in the range are of string type.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsNumber">
            <summary>
            Gets a flag indicating if all the cells in the range are of number type.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsBoolean">
            <summary>
            Gets a flag indicating if all the cells in the range are of boolean type.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsDateTime">
            <summary>
            Gets a flag indicating if all the cells in the range are of DateTime type.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsFormula">
            <summary>
            Gets a flag indicating if all the cells in the range contain a formula.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsArrayFormula">
            <summary>
            Gets a flag indicating if all the cells in the range contain an array formula.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsEmpty">
            <summary>
            Gets a flag indicating if all the cells in the range are empty.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsError">
            <summary>
            Gets a flag indicating if all the cells in the range contain an error string.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.FormattedText">
            <summary>
            Gets the value of the cell after number formatting is applied.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.Address">
            <summary>
            Gets the range reference in A1 notation and in the language of the macro.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.FormulaResultValue">
            <summary>
            Gets or sets the calculated result of the formula of this range. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.FormulaResultText">
            <summary>
            Gets or sets the calculated result of the formula of this range as a String value.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.FormulaResultNumberValue">
            <summary>
            Gets or sets the calculated result of the formula of this range as a Double value.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.FormulaResultDateTimeValue">
            <summary>
            Gets or sets the calculated result of the formula of this range as a DateTime value.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.FormulaResultBooleanValue">
            <summary>
            Gets or sets the calculated result of the formula of this range as a Boolean value.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.FormulaResultErrorValue">
            <summary>
            Gets or sets the calculated result of the formula of this range as an Error value.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsFormulaResultString">
            <summary>
            Gets a flag indicating if the result of the formulas in all the cells in the range are of String type.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsFormulaResultNumber">
            <summary>
            Gets a flag indicating if the result of the formulas in all the cells in the range are of Double type.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsFormulaResultBoolean">
            <summary>
            Gets a flag indicating if the result of the formulas in all the cells in the range are of Boolean type.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsFormulaResultDateTime">
            <summary>
            Gets a flag indicating if the result of the formulas in all the cells in the range are of DateTime type.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.IsFormulaResultError">
            <summary>
            Gets a flag indicating if the result of the formulas in all the cells in the range are of Error type.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.ColumnWidthInChars">
            <summary>
            Gets or sets the width in characters of the columns in the range.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.RowHeightInPoints">
            <summary>
            Gets or sets the height in points of the rows in the range.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.Style">
            <summary>
            Gets or sets the style of the cell or range of cells. The property can be assigned with an existing style from the workbook styles collection.
            The returned object can be used to set the Number, Borders, Font, Fill, Allignment and Protection options.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.StyleName">
            <summary>
            Gets or sets the name of the style of the cell or range of cells. This can be the name of a user defined style or a predefined style.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.DataValidator">
            <summary>
            Gets the data validator object of this range.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.HasDataValidator">
            <summary>
            Gets a value indicating if the range has a data validator.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.HasDefaultStyle">
            <summary>
            Gets a value indicating if the specified range was set with a style different from the default style.
            True means all the range cells have the default style.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRange.Comment">
            <summary>
            Gets the comment of this range or null if no comment was assigned to this range.
            The range is expected to contain a single cell otherwise the comment of the top left cell of the range will be returned.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelShapeFillTexture">
            <summary>
            Represents the texture fill of a shape interior.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillTexture.TextureType">
            <summary>
            Gets or sets the interior texture. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillTexture.CustomTexturePicture">
            <summary>
            Gets or sets the interior custom texture. This property has effect only if the TextureType is CustomTexture.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillTexture.CustomTextureName">
            <summary>
            Gets or sets the name of the interior picture. This property has effect only if the TextureType is CustomTexture.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelGradientColors">
            <summary>
            Represents the colors mode of a gradient
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientColors.OneColor">
            <summary>
            One color gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientColors.TwoColors">
            <summary>
            Two colors gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientColors.Preset">
            <summary>
            Preset gradient. Not implemented.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelRangesCollection">
            <summary>
            Represents a collection of ranges in a worksheet.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRangesCollection.#ctor">
            <summary>
            Constructs and empty collection of ranges.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRangesCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRangesCollection.AddRange(Winnovative.ExcelLib.ExcelRange)">
            <summary>
            Adds a range to the collection.
            </summary>
            <param name="range">The ExcelRange to be added.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelRangesCollection.RemoveRange(System.Int32)">
            <summary>
            Removes the range at the specified zero based index from collection.
            </summary>
            <param name="rangeIndex">The zero based index in collection from where to remove the range.</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRangesCollection.Item(System.Int32)">
            <summary>
            Gets the range at the specified index. 
            </summary>
            <param name="rangeIndex">A zero based index in the ranges collection</param>
            <returns>The range at the specified index</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelRangesCollection.Count">
            <summary>
            Gets the number of ranges in collection.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelNamedRange">
            <summary>
            Represents a named range in a worksheet. Named ranges can be added to the worksheet or workbook named ranges collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelNamedRange.Name">
            <summary>
            Gets or sets the name of the range.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelNamedRange.Range">
            <summary>
            Gets or sets the range referenced by this named range.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelNamedRange.NameScope">
            <summary>
            Gets a flag indicating if the named range is defined at the workbook level or at the worksheet level.
            The range is expected to contain a single cell otherwise the comment will be placed on the top left cell of the range.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelDataValidator">
            <summary>
            Represents a data type validator for a range of cells.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.Value1">
            <summary>
            Gets or sets the first value or expression for data validation. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.Value2">
            <summary>
            Gets or sets the second value or expression for data validation. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.Operator">
            <summary>
            Gets or sets the operator for data validation.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.AllowedDataType">
            <summary>
            Gets or sets the data type of the values allowed by this validator.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.InputMessageTitle">
            <summary>
            Gets or sets the title of the input message to be shown when the cell to be validated is selected.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.InputMessageText">
            <summary>
            Gets or sets the text of the input message to be shown when the cell to be validated is selected.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.ShowInputMessage">
            <summary>
            Gets or sets a flag indicating if the input message is shown when the cell to be validated is selected.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.ErrorAlertTitle">
            <summary>
            Gets or sets the title of the error alert to be shown when user enters invalid data.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.ErrorAlertText">
            <summary>
            Gets or sets the text of the error alert to be shown when user enters invalid data.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.ShowErrorAlert">
            <summary>
            Gets or sets a flag indicating if the error alert is shown when user enters invalid data.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.ErrorAlertStyle">
            <summary>
            Gets or sets the style of the error alert.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.AllowedValues">
            <summary>
            Gets or sets the list of possible string values for a cell.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDataValidator.InCellDropDown">
            <summary>
            Gets or sets a flag indicating if the drop down list with allowed values is displayed in cell. Default value is true.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartWorksheetsCollection">
            <summary>
            Represents a colection of chart worksheets in a workbook.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartWorksheetsCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartWorksheetsCollection.AddChartWorksheet(Winnovative.ExcelLib.ExcelChartType)">
            <summary>
            Use this type of constructor when the series will be manually added to the chart, otherwise use the constructor accepting the data source range parameter. 
            Adds a new chart worksheet with the default name to the collection without specifying the data source range. 
            </summary>
            <param name="chartType">The chart type</param>
            <returns>The newly created chart</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartWorksheetsCollection.AddChartWorksheet(Winnovative.ExcelLib.ExcelChartType,System.String)">
            <summary>
            Use this type of constructor when the series will be manually added to the chart, otherwise use the constructor accepting the data source range parameter. 
            Adds a new chart worksheet with the specified name to the collection without specifying the data source range. 
            </summary>
            <param name="chartType">The chart type</param>
            <param name="worksheetName">The name of the chart worksheet.</param>
            <returns>The newly created chart</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartWorksheetsCollection.AddChartWorksheet(Winnovative.ExcelLib.ExcelChartType,Winnovative.ExcelLib.ExcelRange,System.Boolean)">
            <summary>
            Adds a new chart worksheet with a default name to the collection. The data source range of the chart is specified as the dataSourceRange parameter.
            The chart series are automatically generated from the the data source. 
            </summary>
            <param name="chartType">The chart type</param>
            <param name="dataSourceRange">The data source range of the chart</param>
            <param name="seriesByRows">When this parameter is true the chart series will be created from range rows, otherwise the
            chart series will be created from range columns.</param>
            <returns>The newly created chart worksheet.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartWorksheetsCollection.AddChartWorksheet(Winnovative.ExcelLib.ExcelChartType,Winnovative.ExcelLib.ExcelRange,System.Boolean,System.String)">
            <summary>
            Adds a new chart worksheet with the specified name to the collection. The data source range of the chart is specified as the dataSourceRange parameter.
            The chart series are automatically generated from the the data source. 
            </summary>
            <param name="chartType">The chart type</param>
            <param name="dataSourceRange">The data source range of the chart</param>
            <param name="seriesByRows">When this parameter is true the chart series will be created from range rows, otherwise the
            chart series will be created from range columns.</param>
            <param name="worksheetName">The name of the chart worksheet.</param>
            <returns>The newly created chart worksheet.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartWorksheetsCollection.RemoveChart(System.Int32)">
            <summary>
            Removes the chart worksheet at the specified zero based index from collection
            </summary>
            <param name="chartIndex">The zero based index of the chart worksheet to be removed from collection.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartWorksheetsCollection.RemoveChart(System.String)">
            <summary>
            Removes the chart worksheet with the specified name from collection
            </summary>
            <param name="chartWorksheetName">The name of the chart worksheet to be removed from collection.</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheetsCollection.Count">
            <summary>
            Gets the number of charts in this collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheetsCollection.Item(System.Int32)">
            <summary>
            Gets the chart at the specified index from collection.
            </summary>
            <param name="chartIndex">The zero based index of the chart in collection.</param>
            <returns>The chart at the specified index in collection.</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartWorksheetsCollection.Workbook">
            <summary>
            Gets the workbook of this chart worksheets collection.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartDataPointLabel">
            <summary>
            Represents the label of a chart data point 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataPointLabel.LabelFormat">
            <summary>
            Gets the label format object. The returned object can be used to set the label font, color, background and pattern.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataPointLabel.ContainsSeriesName">
            <summary>
            Gets or sets a flag indicating if the data point label contains the series name. Default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataPointLabel.ContainsCategoryName">
            <summary>
            Gets or sets a flag indicating if the data point label contains the category name. Default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataPointLabel.ContainsValue">
            <summary>
            Gets or sets a flag indicating if the data point label contains the point value. Default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataPointLabel.IncludeLegendKey">
            <summary>
            Gets or sets a flag indicating if the legend color is included near the data point label. Default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataPointLabel.Separator">
            <summary>
            Gets or sets the separator between the data point label fields.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartArea">
            <summary>
            Represents an area in an Excel chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartArea.Border">
            <summary>
            Gets the chart area border. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartArea.Interior">
            <summary>
            Gets the chart area interior. 
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelWorksheetPageSetup">
            <summary>
            Represents the Excel page setup for a worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.FitToPagesMode">
            <summary>
            Gets or sets a value that indicates whether the worksheet is scaled for printing using Zoom property or 
            FitToPagesWide and FitToPagesTall properties. Default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.FitToPagesTall">
            <summary>
            Gets or sets the number of pages tall the worksheet will be scaled to when it's printed.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.FitToPagesWide">
            <summary>
            Gets or sets the number of pages wide the worksheet will be scaled to when it's printed. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.PrintGridlines">
            <summary>
            Gets or sets a flag indicating if the cell gridlines are printed on the page. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.PrintHeadings">
            <summary>
            Gets or sets a flag indicating if the row and column headings are printed with this page. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.PrintArea">
            <summary>
            Gets or sets the range to be printed as a range reference string using A1 notation (e.g. A1:E8). 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.PrintTitleColumns">
            <summary>
            Gets or sets the columns that contain the cells to be repeated on the left side of each page, as a string in A1 notation (e.g. $A:$B). 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.PrintTitleRows">
            <summary>
            Gets or sets the rows that contain the cells to be repeated at the top of each page, as a string in A1 notation (e.g. $1:$2).
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.PrintNotes">
            <summary>
            Gets or sets a flag indicating if the cell notes are printed as end notes in the worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.PrintCommentsLocation">
            <summary>
            Gets or sets the location where the comments are printed
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.PrintErrorsMode">
            <summary>
            Gets or sets the mode the errors are printed.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.Zoom">
            <summary>
            Returns or sets a percentage between 10 and 400 percent by which the the worksheet will be scaled for printing. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetPageSetup.BackgroundPicture">
            <summary>
            Gets or sets the background picture of the worksheet.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelShapeFillGradient">
            <summary>
            Represents a gradient fill options for a shape.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillGradient.Color1">
            <summary>
            Gets or sets the first color of the gradient
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillGradient.Color1Index">
            <summary>
            Gets or sets the index in Excel palette of first color of the gradient
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillGradient.Color2">
            <summary>
            Gets or sets the second color of the gradient
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillGradient.Color2Index">
            <summary>
            Gets or sets the index in Excel palette of second color of the gradient
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillGradient.GradientDirection">
            <summary>
            Gets or sets gradient direction.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillGradient.GradientDirectionVariant">
            <summary>
            Gets or sets the variant for a gradient direction.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillGradient.GradientColorsMode">
            <summary>
            Gets a sets the gradient colors mode. If this property is set to Preset the preset gradient is taken from the PresetGradient property.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillGradient.PresetGradientType">
            <summary>
            Gets or sets the preset gradient. This property has effect when the ColorMode property is set to Preset
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellHorizontalAlignmentType">
            <summary>
            The horizontal alignment of data in a cell
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellHorizontalAlignmentType.General">
             <summary>
            Align according to data type
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellHorizontalAlignmentType.Left">
             <summary>
            Left aligned
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellHorizontalAlignmentType.Center">
             <summary>
            Centered
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellHorizontalAlignmentType.Right">
             <summary>
            Right aligned.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellHorizontalAlignmentType.Fill">
             <summary>
            Fill
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellHorizontalAlignmentType.Justify">
             <summary>
            Justify
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellHorizontalAlignmentType.CenterAcrossSelection">
             <summary>
            Centered across selection.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellHorizontalAlignmentType.Distributed">
             <summary>
            Distributed.
             </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelProtectionAllowFlags">
            <summary>
            The allowed operations for a protected worksheet.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.NoProtection">
            <summary>
            The worksheet has no protection options.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowDefault">
            <summary>
            The default protection allow selection of locked and unlocked cells
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowNone">
            <summary>
            No operation is allowed on a protected worksheet except selecting unlocked cells.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowEditObjects">
            <summary>
            Allow edit objects.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowEditScenarios">
            <summary>
            Allow edit scenarios.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowFormatCells">
            <summary>
            Allow format cells.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowFormatColumns">
            <summary>
            Allow format columns.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowFormatRows">
            <summary>
            Allow format rows.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowInsertColumns">
            <summary>
            Allow insert columns.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowInsertRows">
            <summary>
            Allow insert rows.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowInsertHyperlinks">
            <summary>
            Allow insert hyperlinks.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowDeleteColumns">
            <summary>
            Allow delete columns
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowDeleteRows">
            <summary>
            Allow delete rows
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowSelectLockedCells">
            <summary>
            Allow select locked cells.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowSort">
            <summary>
            Allow sort.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowUseAutoFilter">
            <summary>
            Allow use Auto Filter
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowUsePivotTable">
            <summary>
            Allow use Pivot Tables.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowSelectUnlockedCells">
            <summary>
            Allow select unlocked cells.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelProtectionAllowFlags.AllowAll">
            <summary>
            All operations are allowed for a protected worksheet.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartsCollection">
            <summary>
            Represents the collection of charts in a worksheet
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartsCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartsCollection.AddChart(Winnovative.ExcelLib.ExcelChartType)">
            <summary>
            Use this type of constructor when the series will be manually added to the chart, otherwise use the constructor accepting the data source range parameter. 
            Adds a new chart to the collection without specifying the data source range. 
            The location and the size of the chart inside the worksheet are the default ones.
            </summary>
            <param name="chartType">The chart type</param>
            <returns>The newly created chart</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartsCollection.AddChart(Winnovative.ExcelLib.ExcelChartType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Use this type of constructor when the series will be manually added to the chart, otherwise use the constructor accepting the data source range parameter. 
            Adds a new chart to the collection without specifying the data source range.
            The location and the size of the chart inside the worksheet are specified by the left column, top row, right column and bottom row parameters.
            </summary>
            <param name="chartType">The chart type</param>
            <param name="leftColumnIndex">The one based left column index of the chart area in the worksheet. 
            The left column is included in the chart area.</param>
            <param name="topRowIndex">The one based top row index of the chart area in the worksheet. 
            The top row is included in the chart area.</param>
            <param name="rightColumnIndex">The one based right column index of the chart area in the worksheet. 
            The right column is not included in the chart area.</param>
            <param name="bottomRowIndex">The one based bottom row index of the chart area in the worksheet. 
            The bottom row is not included in the chart area.</param>
            <returns>The newly created chart</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartsCollection.AddChart(Winnovative.ExcelLib.ExcelChartType,Winnovative.ExcelLib.ExcelRange,System.Boolean)">
            <summary>
            Adds a new chart to the collection. The data source range of the chart is specified as the dataSourceRange parameter.
            The chart series are automatically generated from the the data source. The location and the size of the chart 
            inside the worksheet are the default ones.
            </summary>
            <param name="chartType">The chart type</param>
            <param name="dataSourceRange">The data source range of the chart</param>
            <param name="seriesByRows">When this parameter is true the chart series will be created from range rows, otherwise the
            chart series will be created from range columns.</param>
            <returns>The newly created chart</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartsCollection.AddChart(Winnovative.ExcelLib.ExcelChartType,Winnovative.ExcelLib.ExcelRange,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a new chart to the collection. The data source range of the chart is specified as the dataSourceRange parameter.
            The chart series are automatically generated from the the data source. The location and the size of the chart 
            inside the worksheet are specified by the left column, top row, right column and bottom row parameters.
            </summary>
            <param name="chartType">The chart type</param>
            <param name="leftColumnIndex">The one based left column index of the chart area in the worksheet. 
            The left column is included in the chart area.</param>
            <param name="topRowIndex">The one based top row index of the chart area in the worksheet. 
            The top row is included in the chart area.</param>
            <param name="rightColumnIndex">The one based right column index of the chart area in the worksheet. 
            The right column is not included in the chart area.</param>
            <param name="bottomRowIndex">The one based bottom row index of the chart area in the worksheet. 
            The bottom row is not included in the chart area.</param>
            <param name="dataSourceRange">The data source range of the chart</param>
            <param name="seriesByRows">When this parameter is true the chart series will be created from range rows, otherwise the
            chart series will be created from range columns.</param>
            <returns>The newly created chart</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartsCollection.RemoveChart(System.Int32)">
            <summary>
            Removes the chart at the specified zero based index from collection
            </summary>
            <param name="chartIndex">The zero based index of the chart to be removed from collection.</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartsCollection.Count">
            <summary>
            Gets the number of charts in this collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartsCollection.Item(System.Int32)">
            <summary>
            Gets the chart at the specified index from collection.
            </summary>
            <param name="chartIndex">The zero based index of the chart in collection.</param>
            <returns>The chart at the specified index in collection.</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartsCollection.Worksheet">
            <summary>
            Gets the worksheet of this charts collection
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType">
            <summary>
            Represents the available preset gradients
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.EarlySunset">
            <summary>
            Early Sunset gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.LateSunset">
            <summary>
            Late Sunset gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Nightfall">
            <summary>
            Nightfall gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Daybreak">
            <summary>
            Daybreak gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Horizon">
            <summary>
            Horizon gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Desert">
            <summary>
            Desert gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Ocean">
            <summary>
            Ocean gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.CalmWater">
            <summary>
            Calm Water gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Fire">
            <summary>
            Fire gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Fog">
            <summary>
            Fog gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Moss">
            <summary>
            Moss gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Peacock">
            <summary>
            Peacock gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Wheat">
            <summary>
            Wheat gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Parchment">
            <summary>
            Parchment gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Mahogany">
            <summary>
            Mahogany gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Rainbow">
            <summary>
            Rainbow gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Rainbow2">
            <summary>
            Rainbow II gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Gold">
            <summary>
            Gold gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Gold2">
            <summary>
            Gold II preset gradient type.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Brass">
            <summary>
            Brass gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Chrome">
            <summary>
            Chrome gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Chrome2">
            <summary>
            Chrome II gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Silver">
            <summary>
            Silver gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPresetGradientType.Sapphire">
            <summary>
            Sapphire gradient.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellFill">
            <summary>
            Represents the interior style of a cell or range of cells.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFill.FillType">
            <summary>
            Gets or sets the cell fill type.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFill.SolidFillOptions">
            <summary>
            Gets the solid fill options object for the interior. This property returns a null object if the InteriorType is not SolidFill.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFill.PatternFillOptions">
            <summary>
            Gets the pattern options object for the interior. This property returns a null object if the InteriorType is not PatternFill.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFill.GradientFillOptions">
            <summary>
            Gets the gradient for the interior. Returns a null object if the InteriorType property is not GradientFill. 
            This property is valid only for Excel 2007 workbooks. 
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelPageOrientation">
            <summary>
            Represents the page orientation of a worksheet.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPageOrientation.Portrait">
            <summary>
            Portrait page orientation.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPageOrientation.Landscape">
            <summary>
            Landscape page orientation.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelHyperlinkType">
            <summary>
            Represents the type of URL in a worksheet.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelHyperlinkType.Url">
            <summary>
            The target of the hyperlink is an URL adress. 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelHyperlinkType.Range">
            <summary>
            The target of the hyperlink is an Excel range.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartRotation3D">
            <summary>
            Represents the rotation properties for a 3D chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartRotation3D.XRotation">
            <summary>
            Gets or sets the X axis rotation in degrees as a value between 0 and 360.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartRotation3D.YRotation">
            <summary>
            Gets or sets the Y axis rotation in degrees as a value between –90 and 90.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartRotation3D.Perspective">
            <summary>
            Gets or sets a value between 0 and 100 describing the depth appearance of the chart.
            The smallest value 0 is identical to having a parallel camera, and the largest value 100 
            produces the most exaggerated perspective, similar to what is produced with a wide-angle camera.
            This property has effect only if the PerspectiveEnabled property is true.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartRotation3D.PerspectiveEnabled">
            <summary>
            Gets or sets a flag indicating if the 3D perspective is enabled for the chart.
            If the property is false, the chart axes will be in right angle and the perspective effect is disabled.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartRotation3D.HeightPercentOfBase">
            <summary>
            Gets or sets a value between 5 and 500 representing the percentage of the height of the chart compared 
            against the length of the bottom of the chart on X axis. Height of 100 percent means the chart will be 
            as high as it is wide. A 200 percent means the chart will be twice as high as it is wide. HeightPercentOfBase
            has effect only when Autoscale property is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartRotation3D.DepthPercentOfBase">
            <summary>
            Gets or sets a value between 0 and 2000 representing the percentage of the depth of the 3D chart compared 
            against the length of the bottom of the chart on X axis. Depth of 100 percent means the chart will be 
            as deep as it is wide. A 200 percent means the chart will be twice as deep as it is wide. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartRotation3D.Autoscale">
            <summary>
            Gets or sets a flag indicating if the height percentage of the chart can be set independently of depth percentage.
            When this flag is true the height percentage is automatically calculated function of the depth percentage.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellFillPatternType">
            <summary>
            The interior pattern of a cell
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.Gray_50_Percent">
            <summary>
            50% Gray pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.Gray_75_Percent">
            <summary>
            75% Gray pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.Gray_25_Percent">
            <summary>
            25% Gray pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.Gray_12_5_Percent">
            <summary>
            12.5% Gray pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.Gray_6_25_Percent">
            <summary>
            6.25% Gray pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.HorizontalStripe">
            <summary>
            Horizontal Stripe pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.VerticalStripe">
            <summary>
            Vertical Stripe pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.ReverseDiagonalStripe">
            <summary>
            Reverse Diagonal Stripe pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.DiagonalStripe">
            <summary>
            Diagonal Stripe pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.DiagonalCrosshatch">
            <summary>
            Diagonal Crosshatch pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.ThickDiagonalCrosshatch">
            <summary>
            Thick Diagonal Crosshatch pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.ThinHorizontalStripe">
            <summary>
            Thin Horizontal Stripe pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.ThinVerticalStripe">
            <summary>
            Thin Vertical Stripe pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.ThinReverseDiagonalStripe">
            <summary>
            Thin Reverse Diagonal Stripe pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.ThinDiagonalStripe">
            <summary>
            Thin Diagonal Stripe pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.ThinHorizontalCrosshatch">
            <summary>
            Thin Horizontal Crosshatch pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillPatternType.ThinDiagonalCrosshatch">
            <summary>
            Thin Diagonal Crosshatch pattern.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelLibException">
            <summary>
            Exception thrown by the Excel library
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelLibException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelLibException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception that triggered this exception</param>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelHyperlink">
            <summary>
            Represents a hyperlink in the worksheet hyperlinks collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelHyperlink.Type">
            <summary>
            Gets or sets the hyperlink type. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelHyperlink.Address">
            <summary>
            The target address to which this hyperlink points. 
            The target address can be a URL (e.g. 'http://www.mysite.com' or 'maito://support@mysite.com'), 
            a file or folder in the file system (e.g. 'file://C:\MyFolder' or 'file://C:\MyFolder\MyFile.txt' 
            or file://\\MyServer\MyFolder) 
            or a range adress from the same worksheet or another worksheet (e.g. 'MySheet!A1' or 'A1:B2' ) function of the hyperlink type.
            When the address is a range address, the name of the range cannot contain white spaces. You can define a named range if the target 
            worksheet name contains spaces.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelHyperlink.SubAddress">
            <summary>
            Gets or sets the location inside the target document of the hyperlink. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelHyperlink.Name">
            <summary>
            Gets the name of the hyperlink.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelHyperlink.Text">
            <summary>
            Gets or sets the text to be displayed for the hyperlink. If this property is not set the 
            target address will be used for the displayed text.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelHyperlink.ToolTip">
            <summary>
            Gets or sets the tooltip text for this hyperlink.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelHyperlink.Range">
            <summary>
            Gets the range to which this hyperlink was attached. 
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelDataValidatorDataType">
            <summary>
            Represents the data types allowed by a data validator.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorDataType.AnyValue">
            <summary>
            Any value is allowed.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorDataType.WholeNumber">
            <summary>
            Integer values are allowed.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorDataType.Decimal">
            <summary>
            Decimal values are allowed.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorDataType.List">
            <summary>
            Values from a list are allowed.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorDataType.Date">
            <summary>
            Date values are allowed.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorDataType.Time">
            <summary>
            Time values are allowed.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorDataType.TextLength">
            <summary>
            Text length values are allowed.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorDataType.Custom">
            <summary>
            Custom validation.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartValueDisplayUnits">
            <summary>
            The display units for the value axis.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartValueDisplayUnits.None">
            <summary>
            No scale is set for the axis values
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartValueDisplayUnits.Hundreds">
            <summary>
            The displayed values are hundreds
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartValueDisplayUnits.Thousands">
            <summary>
            The displayed values are thousands
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartValueDisplayUnits.Scale_10000">
            <summary>
            The displayed values are ten thousands
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartValueDisplayUnits.Scale_100000">
            <summary>
            The displayed values are hundred thousands
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartValueDisplayUnits.Millions">
            <summary>
            The displayed values are millions
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartValueDisplayUnits.Scale_10000000">
            <summary>
            The displayed values are ten millions
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartValueDisplayUnits.Scale_100000000">
            <summary>
            The displayed values are hundred millions
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartValueDisplayUnits.Billions">
            <summary>
            The displayed values are billions
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartValueDisplayUnits.Trillions">
            <summary>
            The displayed values are trillions
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartValueDisplayUnits.CustomUnit">
            <summary>
            The displayed values are in a custom unit
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartDataPoint">
            <summary>
            Represents a data point in the chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataPoint.Label">
            <summary>
            Gets the data point label.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataPoint.Border">
            <summary>
            Gets the data point border. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataPoint.Interior">
            <summary>
            Gets the data point interior. 
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellNumber">
            <summary>
            Represents the number format options for a cell or a range of cells.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellNumber.NumberFormatString">
            <summary>
            Gets or sets the number format string of the cells in a range.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellFillSolid">
            <summary>
            Represents the solid fill for a cell interior.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillSolid.BackColor">
            <summary>
            Gets or sets the background color of the cell.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillSolid.BackColorIndex">
            <summary>
            Gets or sets the index in Excel palette of background color of the cell.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelWorksheetSecurity">
            <summary>
            Manages the security options for a worksheet.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheetSecurity.ProtectWorksheet">
            <summary>
            Protect the worksheet using the default protection options.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheetSecurity.ProtectWorksheet(Winnovative.ExcelLib.ExcelProtectionAllowFlags)">
            <summary>
            Protects the worksheet and allows only the operations specified by the protection flags.
            </summary>
            <param name="allowFlags">The flags specifying the operations allowed after protection.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheetSecurity.ProtectWorksheet(System.String)">
            <summary>
            Protect the worksheet using the default protection options and set a password required to unprotect the worksheet.
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheetSecurity.ProtectWorksheet(System.String,Winnovative.ExcelLib.ExcelProtectionAllowFlags)">
            <summary>
            Protects the worksheet and allows only the operations specified by the protection flags 
            and set a password required to unprotect the worksheet.
            </summary>
            <param name="password">The password.</param>
            <param name="allowFlags">The flags specifying the operations allowed after protection.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheetSecurity.UnprotectWorksheet">
            <summary>
            Unprotects the worksheet when no password was used to protect the worksheet.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheetSecurity.UnprotectWorksheet(System.String)">
            <summary>
            Unprotects the worksheet providing the password used when the worksheet was protected.
            </summary>
            <param name="password">The password used to unprotect the worksheet.</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheetSecurity.ProtectionFlags">
            <summary>
            Gets the operations allowed for a protected worksheet.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellFillGradient">
            <summary>
            Represents a gradient fill options for a cell or range.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillGradient.Color1">
            <summary>
            Gets or sets the first color of the gradient
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillGradient.Color1Index">
            <summary>
            Gets or sets the index in Excel palette of first color of the gradient
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillGradient.Color2">
            <summary>
            Gets or sets the second color of the gradient
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillGradient.Color2Index">
            <summary>
            Gets or sets the index in Excel palette of second color of the gradient
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillGradient.Direction">
            <summary>
            Gets or sets gradient direction.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellFillGradient.Variant">
            <summary>
            Gets or sets the variant for a gradient direction.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelDataValidatorErrorStyle">
            <summary>
            Represents the style of the error alert for data validator.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorErrorStyle.Stop">
            <summary>
            Stop error syle.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorErrorStyle.Warning">
            <summary>
            Warning error syle.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelDataValidatorErrorStyle.Information">
            <summary>
            Information error syle.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartValueAxis">
            <summary>
            Represents the value axis (vertical axis) of a chart
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartValueAxis.ShowVerticalTitleText">
            <summary>
            Call this method to display the axis title text on vertical direction, from bottom to top.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.MinValue">
            <summary>
            Minimum value on value axis.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.MaxValue">
            <summary>
            Minimum value on value axis.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.MajorUnit">
            <summary>
            Determines the interval of tick marks and chart gridlines for the major unit.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.MinorUnit">
            <summary>
            Determines the interval of tick marks and chart gridlines for the minor unit.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.AutoMinValue">
            <summary>
            Gets or sets a flag indicating if the MinValue is automatically selected. Default value is true.
            A change of the MinValue property will put this flag on false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.AutoMaxValue">
            <summary>
            Gets or sets a flag indicating if the MaxValue is automatically selected. Default value is true.
            A change of the MaxValue property will put this flag on false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.AutoMajorUnit">
            <summary>
            Gets or sets a flag indicating if the MajorUnit is automatically selected. Default value is true.
            A change of the MajorUnit property will put this flag on false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.AutoMinorUnit">
            <summary>
            Gets or sets a flag indicating if the MinorUnit is automatically selected. Default value is true.
            A change of the MinorUnit property will put this flag on false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.CategoryAxisCrossesAtValue">
            <summary>
            Gets or sets the value representing where the horizontal (category) axis crosses the vertical (value) axis.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.CategoryAxisCrossesAtMaximum">
            <summary>
            Gets or sets or a flag indicating that the horizontal (category) axis crosses the vertical (value) axis at the maximum value of
            the value axis.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.AutoCategoryAxisCross">
            <summary>
            Gets or sets a flag indicating if the value where the category axis crosses the value axis is automatically selected. 
            Default value is true. A change of the CategoryAxisCrossesAt property will put this flag on false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.DisplayUnit">
            <summary>
            Gets or sets the unit for the values on the value axis. The default value is None which means no scaling is used on the 
            value axis.
            There are a few possible predefined display units like hundreds, thousands, millions, billions, etc for the value axis scaling. 
            It is also possible to define a custom display unit. To set a custom value for the display unit the property should be set 
            to CustomUnit and in this case the CustomDisplayUnit should be set to the desired unit value.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.CustomDisplayUnit">
            <summary>
            Gets or sets a value representing a custom display unit as an alternative to the predefined display units (100, 1000, 10000, etc).
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.LogarithmicScale">
            <summary>
            Gets or sets a flag indicating if the value axis uses a logarithmic scale.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.LabelsPosition">
            <summary>
            Gets or sets the labels position on value axis. Default value is NextToAxis.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.LabelsRotation">
            <summary>
            Gets or sets the rotation angle of the axis labels as a value between -90 and 90. A positive value will rotate the 
            labels clockwise and the negative values will rotate the text counter-clockwise.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.MinorGridLinesStyle">
            <summary>
            Gets the value axis minor grid lines. The returned object can be used to set the value axis minor grid lines 
            color, dash type and weight.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.MajorGridLinesStyle">
            <summary>
            Gets the value axis major grid lines. The returned object can be used to set the value axis major grid lines 
            color, dash type and weight.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.ShowMinorGridLines">
            <summary>
            Gets or sets a flag indicating if the minor grid lines are displayed in chart. The default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.ShowMajorGridLines">
            <summary>
            Gets or sets a flag indicating if the minor grid lines are displayed in chart. The default value is true.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.MinorTickMarkType">
            <summary>
            Gets or sets the minor tick marks type
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.MajorTickMarkType">
            <summary>
            Gets or sets the minor tick marks type
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.LineStyle">
            <summary>
            Gets the value axis line style.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.Title">
            <summary>
            Gets the value axis title box. The returned object can be used to set the title text, font, color, background and pattern.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.Font">
            <summary>
            Gets the value axis font. The returned object can be used to set the properties of the Font used for
            the value axis labels.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartValueAxis.ValuesInReverseOrder">
            <summary>
            Gets or sets a flag indicating if the values are plotted in reverse order on the value axis.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartSeriesCollection">
            <summary>
            Represents a collection of chart series.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartSeriesCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartSeriesCollection.AddSeries">
            <summary>
            Add a new series to the collection. The series will have a default name.
            </summary>
            <returns>The newly created series</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartSeriesCollection.AddSeries(System.String)">
            <summary>
            Add a new series with the specified name to the collection.
            </summary>
            <param name="seriesName">The name of the series.</param>
            <returns>The newly created series</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartSeriesCollection.RemoveSeries(System.Int32)">
            <summary>
            Removes the series at the specified zero based index from collection.
            </summary>
            <param name="seriesIndex">The zero based index of the series to be removed</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartSeriesCollection.RemoveSeries(System.String)">
            <summary>
            Removes the series with the specified name from collection.
            </summary>
            <param name="seriesName">The name of the series to be removed.</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesCollection.Count">
            <summary>
            Gets the number of series in this collection
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesCollection.Item(System.Int32)">
            <summary>
            Gets the series at the specified zero based index from collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesCollection.Item(System.String)">
            <summary>
            Gets the series with the specified name from collection.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartSeries">
            <summary>
            Represents a data series in a Excel chart
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeries.CategoryNamesRange">
            <summary>
            Gets or sets the range from where the category names for this series are taken.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeries.ValuesRange">
            <summary>
            Gets or sets the range from where the series values are taken.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeries.Name">
            <summary>
            Gets or sets the series name.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeries.ChartType">
            <summary>
            Gets or sets the chart type of the series. Series in an Excel chart can have different types. For example a serie can be 
            of column type and another serie of line type. By default the chart type of the series is taken from the chart parent.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeries.DataPoints">
            <summary>
            Gets the collection of data points of this series
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeries.Border">
            <summary>
            Gets the border of the data point in this series. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeries.Interior">
            <summary>
            Gets the series interior. 
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartDataTable">
            <summary>
            Represents the formatting options for the chart data table.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataTable.ShowBorderHorizontal">
            <summary>
            Gets or sets indicating if the chart data table has horizontal borders.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataTable.ShowBorderVertical">
            <summary>
            Gets or sets indicating if the chart data table has vertical borders.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataTable.ShowBorderOutline">
            <summary>
            Gets or sets indicating if the chart data table has outline borders.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataTable.ShowLegendKey">
            <summary>
            Gets or sets indicating if the legend keys are visible in data table .
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartDataPointsCollection">
            <summary>
            Represents a collection of data points in a chart series
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartDataPointsCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataPointsCollection.Count">
            <summary>
            Gets the number of data points in the collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataPointsCollection.Item(System.Int32)">
            <summary>
            Gets the data point at the specified zero based index in collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartDataPointsCollection.All">
            <summary>
            Gets a data point representing all the data points in the collection. The settings of this data point are applied to all the
            data points in the collection.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellFillType">
            <summary>
            Represents the type of interior for cell or range of cells.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillType.NoFill">
            <summary>
            No interior pattern is applied for the cell.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillType.SolidFill">
            <summary>
            The cell interior is filled with a solid color.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillType.PatternFill">
            <summary>
            The cell interior is a pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellFillType.GradientFill">
            <summary>
            The cell interior is a two colors gradient. This cell interior type is valid only for Excel 2007 workbooks.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellVerticalAlignmentType">
            <summary>
            The vertical alignment of data in a cell
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellVerticalAlignmentType.Top">
            <summary>
            Top aligned
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellVerticalAlignmentType.Center">
             <summary>
            Centered
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellVerticalAlignmentType.Bottom">
            <summary>
            Bottom aligned
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellVerticalAlignmentType.Justify">
             <summary>
            Jistified
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellVerticalAlignmentType.Distributed">
            <summary>
            Distributed
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelPagePrintErrorsMode">
            <summary>
            Represents the mode of printing errors.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePrintErrorsMode.PrintErrorsBlank">
            <summary>
            Print errors as blank.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePrintErrorsMode.PrintErrorsDash">
            <summary>
            Print errors as dashes.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePrintErrorsMode.PrintErrorsDisplayed">
            <summary>
            Print all errors.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePrintErrorsMode.PrintErrorsNA">
            <summary>
            Print errors as not available.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartTickMarkType">
            <summary>
            Represents the chart axis tick marks type
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartTickMarkType.None">
            <summary>
            No tick mark is displayed.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartTickMarkType.Inside">
            <summary>
            The tick mark is displayed on the inside of the axis.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartTickMarkType.Outside">
            <summary>
            The tick mark is displayed on the outside of the axis.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartTickMarkType.Cross">
            <summary>
            The tick mark is displayed on both sides of the axis.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartLine">
            <summary>
            Represents the border of a chart element
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLine.LineColor">
            <summary>
            Gets or sets a custom color for the border.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLine.LineColorIndex">
            <summary>
            Gets or sets a custom color index in the workbook palette for the border.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLine.LineType">
            <summary>
            Gets or sets the border line dash type. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLine.LineWeight">
            <summary>
            Gets or sets the border line weight type. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLine.AutoFormatBorder">
            <summary>
            Gets or sets a flag indicating if the border is auto formatted. Default value is false and the custom format is applied. 
            Setting a formatting property will put this flag on false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLine.AutoColorBorder">
            <summary>
            Gets or sets a flag indicating if the border color is auto colored. Default value is true and the auto color is applied. 
            Setting a custom border color will put this property on false.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartLegendPosition">
            <summary>
            Represents the chart legend position in chart area.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLegendPosition.Bottom">
            <summary>
            Displays the legend to the bottom of the chart area.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLegendPosition.TopRight">
            <summary>
            Displays the legend to the to riht corner of the chart area.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLegendPosition.Top">
            <summary>
            Displays the legend to the top of the chart area.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLegendPosition.Right">
            <summary>
            Displays the legend to the right of the chart area.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLegendPosition.Left">
            <summary>
            Displays the legend to the left of the chart area.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLegendPosition.None">
            <summary>
            The legend has not a preferred position.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelShapeFillType">
            <summary>
            Represents the type of interior of a shape.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillType.NoFill">
            <summary>
            The interior is not visible
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillType.SolidFill">
            <summary>
            The interior is filled with a solid color.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillType.PatternFill">
            <summary>
            The interior is filled with a pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillType.TextureFill">
            <summary>
            The interior is filled with a texture.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillType.PictureFill">
            <summary>
            The interior is a picture..
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillType.GradientFill">
            <summary>
            The interior is filled with a gradient.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelNamedRangeScopeType">
            <summary>
            Represents the scope of a named range.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelNamedRangeScopeType.Worksheet">
            <summary>
            Worksheet scope
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelNamedRangeScopeType.Workbook">
            <summary>
            Workbook scope
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartSeriesAxis">
            <summary>
            Represents the series axis (depth axis) of a chart
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.SerieLabelsInterval">
            <summary>
            Gets or sets the number of series between labels on series axis. Set this property with 1 to display a label for every serie, 
            2 to display a label for every other serie, 3 to display a label for every third serie, and so on
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.TickMarksInterval">
            <summary>
            Gets or sets the number of series between tick marks on series axis. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.LabelsPosition">
            <summary>
            Gets or sets the labels position on series axis. Default value is NextToAxis.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.LabelsRotation">
            <summary>
            Gets or sets the rotation angle of the axis labels as a value between -90 and 90. A positive value will rotate the 
            labels clockwise and the negative values will rotate the text counter-clockwise.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.MinorGridLinesStyle">
            <summary>
            Gets the series axis minor grid lines. The returned object can be used to set the series axis minor grid lines 
            color, dash type and weight.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.MajorGridLinesStyle">
            <summary>
            Gets the series axis major grid lines. The returned object can be used to set the series axis major grid lines 
            color, dash type and weight.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.ShowMinorGridLines">
            <summary>
            Gets or sets a flag indicating if the minor grid lines are displayed in chart. The default value is false.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.ShowMajorGridLines">
            <summary>
            Gets or sets a flag indicating if the minor grid lines are displayed in chart. The default value is true.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.MinorTickMarkType">
            <summary>
            Gets or sets the minor tick marks type
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.MajorTickMarkType">
            <summary>
            Gets or sets the minor tick marks type
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.LineStyle">
            <summary>
            Gets the series axis line style.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.Title">
            <summary>
            Gets the series axis title box. The returned object can be used to set the title text, font, color, background and pattern.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.Font">
            <summary>
            Gets the series axis font. The returned object can be used to set the properties of the Font used for
            the series axis labels.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartSeriesAxis.ValuesInReverseOrder">
            <summary>
            Gets or sets a flag indicating if the values are plotted in reverse order on the series axis.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartFormattedText">
            <summary>
            Represents a formatted text area in a chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartFormattedText.Text">
            <summary>
            Gets or sets the string value
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartFormattedText.Font">
            <summary>
            Gets the font of the formatted text
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartFormattedText.Border">
            <summary>
            Gets the formatted text border.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartFormattedText.Interior">
            <summary>
            Gets the formatted text interior.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelWorksheet">
            <summary>
            Excel Worksheet
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.SetDefaultRowHeightInPoints(System.Double)">
            <summary>
            Sets the default row height in points. You can specify a row height of 0 to 409. 
            This value represents the height measurement in points (1 point equals 1/72 inch). 
            The default row height is 12.75 points.
            </summary>
            <param name="rowHeightPoints"></param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.SetDefaultColumnWidthInChars(System.Double)">
            <summary>
            Sets the default column width in characters for the columns in this worksheet.
            </summary>
            <param name="columnWidthChars">The default column width in characters. On a worksheet, you can specify a column width of 0 to 255. 
            This value represents the number of characters that can be displayed in a cell that is formatted with 
            the standard font (standard font: The default text font for worksheets. The standard font determines the default font 
            for the Normal cell style.). The default column width is 8.43 characters.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.SetColumnAutoStyle(System.Int32,Winnovative.ExcelLib.ExcelCellStyle)">
            <summary>
            Sets the auto style of a column. If this method is called before a cell in the specified column becomes part of the used range
            (a value is set in cell), the cell will automatically be assigned with the specified column style.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.SetRowAutoStyle(System.Int32,Winnovative.ExcelLib.ExcelCellStyle)">
            <summary>
            Set the auto style of a row. If this method is called before a cell in the specified row becomes part of the used range
            (a value is set in cell), the cell will automatically be assigned with the specified row style.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.SetColumnWidthInChars(System.Int32,System.Double)">
            <summary>
            Sets the column width in characters for the specified column. On a worksheet, you can specify a column width of 0 to 255. 
            This value represents the number of characters that can be displayed in a cell that is formatted with 
            the standard font (standard font: The default text font for worksheets. The standard font determines the default font 
            for the Normal cell style.). The default column width is 8.43 characters. If the column width is set to 0, the column is hidden.
            </summary>
            <param name="columnIndex">The one based column index.</param>
            <param name="columnWidthChars">The column width in chars.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.GetColumnWidthInChars(System.Int32)">
            <summary>
            Gets the specified column width in characters. On a worksheet, you can specify a column width of 0 to 255. 
            This value represents the number of characters that can be displayed in a cell that is formatted with 
            the standard font (standard font: The default text font for worksheets. The standard font determines the default font 
            for the Normal cell style.). The default column width is 8.43 characters. 
            </summary>
            <param name="columnIndex">The one based column index.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.SetRowHeightInPoints(System.Int32,System.Double)">
            <summary>
            Sets the row height in points for the specified row. You can specify a row height of 0 to 409. 
            This value represents the height measurement in points (1 point equals 1/72 inch). 
            The default row height is 12.75 points. If the row height is set to 0, the row is hidden.
            </summary>
            <param name="rowIndex">The one based row index.</param>
            <param name="rowHeightPoints">The row height in points.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.GetRowHeightInPoints(System.Int32)">
            <summary>
            Gets the specified row height in points. You can specify a row height of 0 to 409. 
            This value represents the height measurement in points (1 point equals 1/72 inch). 
            The default row height is 12.75 points. 
            </summary>
            <param name="rowIndex">The one based row index.</param>
            <returns>The row height in points.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.AutofitRow(System.Int32)">
            <summary>
            Changes the height of the specified row to achieve the best fit for the cells content.
            </summary>
            <param name="rowIndex">The one based index of the row to autofit.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.AutofitColumn(System.Int32)">
            <summary>
            Changes the width of the specified column to achieve the best fit for the cells content.
            </summary>
            <param name="columnIndex">The one based index of the column to autofit.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.AutofitColumns">
            <summary>
            Changes the width of the used range columns to achieve the best fit for the cells content.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.AutofitRows">
            <summary>
            Changes the height of the used range rows to achieve the best fit for the cells content.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.MoveTo(System.Int32)">
            <summary>
            Moves the worksheet in the worksheets collection of the workbook.
            </summary>
            <param name="toIndex">The new index of the worksheet in the worksheets collection of the workbook.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.Activate">
            <summary>
            Makes this worksheet the active worksheet of the workbook.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.InsertRow(System.Int32)">
            <summary>
            Inserts a row at the specified one based in worksheet. The new row will have the default style of the worksheet.
            </summary>
            <param name="rowIndex">The one based index of the new row.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.InsertRow(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Inserts a row with style at the specified one based in worksheet. If inheritStyle parameter is false the new row will have the 
            default style of the worksheet. If inheritStyle is true the new row will inherit the style from the previous row if
            fromPrevious parameter is true or from the next row if the fromPrevious parameter is false.
            </summary>
            <param name="rowIndex">The one based index of the new row.</param>
            <param name="inheritStyle">A flag indicating if the new column should inherit the style from the previous or the 
            next row function of the fromPrevious parameter.</param>
            <param name="fromPrevious">A flag indicating if the style should be inherited from the previous or from the next row.
            This flag has effect only when inheritStyle is true.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.InsertColumn(System.Int32)">
            <summary>
            Inserts a column at the specified one based index in worksheet. The new column will have the default style of the worksheet.
            </summary>
            <param name="columnIndex">The one based index of the new column.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.InsertColumn(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Inserts a column with style at the specified one based index in worksheet. If inheritStyle parameter is false the new column will have the 
            default style of the worksheet. If inheritStyle is true the new column will inherit the style from the previous column if
            fromPrevious parameter is true or from the next column if the fromPrevious parameter is false.
            </summary>
            <param name="columnIndex">The one based index of the new column.</param>
            <param name="inheritStyle">A flag indicating if the new column should inherit the style from the previous or the 
            next column function of the fromPrevious parameter.</param>
            <param name="fromPrevious">A flag indicating if the style should be inherited from the previous or from the next column.
            This flag has effect only when inheritStyle is true.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.DeleteRow(System.Int32)">
            <summary>
            Removes the row at the specified zero based index from worksheet.
            </summary>
            <param name="rowIndex">The one based index of the row to be removed.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.DeleteColumn(System.Int32)">
            <summary>
            Removes the column at the specified zero based index from worksheet.
            </summary>
            <param name="columnIndex">The one based index of the column to be removed.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.SetRowVisibility(System.Int32,System.Boolean)">
            <summary>
            Sets the visibility of the row at the specified index.
            </summary>
            <param name="rowIndex">The one based index of the row.</param>
            <param name="visible">The row visibility (true makes the row visible, false hides the row) </param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.SetColumnVisibility(System.Int32,System.Boolean)">
            <summary>
            Sets the visibility of the column at the specified index.
            </summary>
            <param name="columnIndex">The one based index of the column.</param>
            <param name="visible">The row visibility (true makes the row visible, false hides the row) </param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.GetRowVisibility(System.Int32)">
            <summary>
            Gets the visibility of the row at the specified index.
            </summary>
            <param name="rowIndex">The one based index of the row.</param>
            <returns>The row visibility</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.GetColumnVisibility(System.Int32)">
            <summary>
            Gets the visibility of the column at the specified index.
            </summary>
            <param name="columnIndex">The one based index of the column.</param>
            <returns>The column visibility</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.LoadDataTable(System.Data.DataTable,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads the values from the specified System.Data.DataTable object into the worksheet at the location
            given by the top row and left column indexes.
            </summary>
            <param name="dataTable">The DataTable object to be imported.</param>
            <param name="topRowIndex">The top row index of the range where the values will be loaded in worksheet.</param>
            <param name="leftColumnIndex">The left column index of the range where the values will be loaded in worksheet.</param>
            <param name="setColumnNames">A flag indicating if the column names from DataTable should be used or not to create 
            a header row in the range where the values are imported.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.LoadDataTable(System.Data.DataTable,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads the values from the specified System.Data.DataTable object into the worksheet at the location
            given by the top row and left column indexes.
            </summary>
            <param name="dataTable">The DataTable object to be imported.</param>
            <param name="topRowIndex">The top row index of the range where the values will be loaded in worksheet.</param>
            <param name="leftColumnIndex">The left column index of the range where the values will be loaded in worksheet.</param>
            <param name="maxRowsCount">The maximum number of rows to load from data table. A negative value means to load all the rows.</param>
            <param name="maxColumnsCount">The maximum number of columns to load from data table. A negative value means to load all the columns.</param>
            <param name="setColumnNames">A flag indicating if the column names from DataTable should be used or not to create 
            a header row in the range where the values are imported.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.LoadDataView(System.Data.DataView,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads the values from the specified System.Data.DataView object into the worksheet at the location
            given by the top row and left column indexes.
            </summary>
            <param name="dataView">The DataView object to be imported.</param>
            <param name="topRowIndex">The top row index of the range where the values will be loaded in worksheet.</param>
            <param name="leftColumnIndex">The left column index of the range where the values will be loaded in worksheet.</param>
            <param name="setColumnNames">A flag indicating if the column names from DataView should be used or not to create 
            a header row in the range where the values are imported.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.LoadDataView(System.Data.DataView,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Loads the values from the specified System.Data.DataView object into the worksheet at the location
            given by the top row and left column indexes.
            </summary>
            <param name="dataView">The DataView object to be imported.</param>
            <param name="topRowIndex">The top row index of the range where the values will be loaded in worksheet.</param>
            <param name="leftColumnIndex">The left column index of the range where the values will be loaded in worksheet.</param>
            <param name="maxRowsCount">The maximum number of rows to load from data view. A negative value means to load all the rows.</param>
            <param name="maxColumnsCount">The maximum number of columns to load from data view. A negative value means to load all the columns.</param>
            <param name="setColumnNames">A flag indicating if the column names from DataView should be used or not to create 
            a header row in the range where the values are imported.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.GetDataTable(Winnovative.ExcelLib.ExcelRange,System.Boolean)">
            <summary>
            Gets a System.Data.DataTable object from the specified source range. If the getColumnNames parameter is true the 
            first row of the range will be used to obtain names for the DataTable columns. 
            </summary>
            <param name="sourceRange">The worksheet range from where to get the values.</param>
            <param name="getColumnNames">If this parameter is true the first row of the range will be used to obtain names 
            for the DataTable columns.</param>
            <returns>The resulted DataTable.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelWorksheet.GetDataTable(Winnovative.ExcelLib.ExcelRange,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets a System.Data.DataTable object from the specified source range. 
            If the getColumnNames parameter is true the first row of the range will be used to obtain names for the DataTable columns. 
            If the getFormulaResult parameter is true the result values of the formulas evaluation will be exported 
            If the getColumnDataTypes is true the data type of the first value of the range column will give the data type 
            of the corresponding column in the resulted DataTable.
            </summary>
            <param name="sourceRange">The worksheet range from where to get the values.</param>
            <param name="getColumnNames">If this parameter is true the first row of the range will be used to obtain names 
            for the DataTable columns.</param>
            <param name="getColumnDataTypes">If this parameter is true the data type of the first value of the range column 
            will give the data type of the corresponding column in the resulted DataTable.</param>
            <param name="getFormulaResult">If the getFormulaResult parameter is true the result values of the formulas evaluation will be exported 
            </param>
            <returns>The resulted DataTable.</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.Workbook">
            <summary>
            Gets the parent workbook of this worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.Name">
            <summary>
            Gets or sets the worksheet name.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.SheetIndex">
            <summary>
            Gets the index of this worksheet in the workbook sheets collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.ShowGridLines">
            <summary>
            Gets or sets a flag indicating if the worksheet grid lines are visible or not. Default value is true.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.UsedRangeRows">
            <summary>
            Gets a an array of Range objects representing all the rows in the used range of the worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.UsedRangeColumns">
            <summary>
            Gets an arrat of Range objects representing all the columns in the used range of the worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.Item(System.Int32,System.Int32)">
            <summary>
            Gets the specified cell in the worksheet.
            </summary>
            <param name="row">The one based row index of the cell</param>
            <param name="column">The one based column index of the cell</param>
            <returns>The range containing the referenced cell</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets cells range specified the the higher left and lower right coordinates.
            </summary>
            <param name="row">The one based index of the start row </param>
            <param name="column">The one based index of the start column</param>
            <param name="endRow">The one based index of the end row </param>
            <param name="endColumn">The one based index of the end column</param>
            <returns>The referenced range of cells</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.Item(System.String)">
            <summary>
            Gets range referenced by the range name or range reference string in A1 notation.
            </summary>
            <param name="rangeReference">The range name or range reference string in A1 notation</param>
            <returns>The referenced range</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.UsedRange">
            <summary>
            Gets the used range on the specified worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.UsedRangeCells">
            <summary>
            Gets the cells in the used range of the worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.Charts">
            <summary>
            Gets the charts collection of this worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.Pictures">
            <summary>
            Gets the pictures collection of this worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.Comments">
            <summary>
            Gets the comments collection of this worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.Hyperlinks">
            <summary>
            Gets the collection of hyperlinks of this worksheet
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.NamedRanges">
            <summary>
            Gets the named ranges collection of this worksheet (Worksheet scope named ranges).
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.PageSetup">
            <summary>
            Gets the worksheet page setup options (paper size, page orientation, etc.).
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.HorizontalPageBreaks">
            <summary>
            Gets the collection of horizontal page breaks of this worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.VerticalPageBreaks">
            <summary>
            Gets the collection of vertical page breaks of this worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.WorksheetSecurity">
            <summary>
            Gets an object used to manage the worksheet security options like password protection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.ParseValueString">
            <summary>
            Gets or sets a flag indicating if the values of String type assigned to the Value property of a Range in the worksheet are
            parsed to determine the data type or they are simply considered texts. The default value is true.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.SerializeDefaultRowHeight">
            <summary>
            A flag indicating if the DefaultRowHeightPoints property should be serialized or not when the the format is Xlsx_2007.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelWorksheet.SerializeDefaultColumnWidth">
            <summary>
            A flag indicating if the DefaultRowHeightPoints property should be serialized or not when the the format is Xls_2007.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelHyperlinksCollection">
            <summary>
            Represents a collection of hyperlinks 
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelHyperlinksCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelHyperlinksCollection.AddHyperlink(Winnovative.ExcelLib.ExcelHyperlinkType,Winnovative.ExcelLib.ExcelRange,System.String)">
            <summary>
            Adds a new hyperlink of the specified type to the hyperlinks collection of a worksheet. 
            The hyperlink is attached to the specified source range and poins to the specified target address. 
            The target address can be a URL, a file or folder in the file system or a range adress from a worksheet
            function of the hyperlink type.
            </summary>
            <param name="type">The URL address to which this hyperlink points.</param>
            <param name="sourceRange">The range to which the hyperlink is attached.</param>
            <param name="targetAddress">The target address to which this hyperlink points. 
            The target address can be a URL (e.g. 'http://www.mysite.com' or 'maito://support@mysite.com'), 
            a file or folder in the file system (e.g. 'file://C:\MyFolder' or 'file://C:\MyFolder\MyFile.txt' 
            or file://\\MyServer\MyFolder) 
            or a range adress from the same worksheet or another worksheet (e.g. 'MySheet!A1' or 'A1:B2' ) function of the hyperlink type.
            When the address is a range address, the name of the range cannot contain white spaces. You can define a named range if the target 
            worksheet name contains spaces.
            </param>
            <returns>The newly created hyperlink.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelHyperlinksCollection.RemoveHyperlink(System.Int32)">
            <summary>
            Removes the hyperlink at the specified zero based index from collection
            </summary>
            <param name="hyperlinkIndex">The zero based index in collection from where to remove the hyperlink</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelHyperlinksCollection.Item(System.Int32)">
            <summary>
            Gets the hyperlink at the specified index. 
            </summary>
            <param name="hyperlinkIndex">A zero based index in the hyperlinks collection</param>
            <returns>The hyperlink at the specified index</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelHyperlinksCollection.Count">
            <summary>
            Gets the number of hyperlinks in collection
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelPagePrintCommLocation">
            <summary>
            Represents the location where the comments in a worksheet will be printed.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePrintCommLocation.PrintInPlace">
            <summary>
            Comments will be printed where they were inserted in the worksheet.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePrintCommLocation.PrintNoComments">
            <summary>
            Comments will not be printed.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePrintCommLocation.PrintSheetEnd">
            <summary>
            Print the comments as end notes at the end of the worksheet.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelDocumentSecurity">
            <summary>
            Manage the document security like workbook structure and windows protection, open/write password protection.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelDocumentSecurity.ProtectWorkbook(System.Boolean,System.Boolean)">
            <summary>
            Protects the workbook window and structure.
            </summary>
            <param name="protectWindow">When this flag is true the workbook window will be protected.</param>
            <param name="protectStructure">When this flag is true the workbook structure is protected.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelDocumentSecurity.ProtectWorkbook(System.Boolean,System.Boolean,System.String)">
            <summary>
            Protects the workbook window and structure and sets a password to unprotect the workbook.
            </summary>
            <param name="protectWindow">When this flag is true the workbook window will be protected.</param>
            <param name="protectStructure">When this flag is true the workbook structure is protected.</param>
            <param name="password">The password to be used to unprotect the workbook.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelDocumentSecurity.UnprotectWorkbook">
            <summary>
            Removes protection from the workbook.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelDocumentSecurity.UnprotectWorkbook(System.String)">
            <summary>
            Removes the protection from the workbook.
            </summary>
            <param name="password">Password to unprotect workbook.</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentSecurity.OpenWorkbookPassword">
            <summary>
            Gets or sets the password that must be supplied to open the workbook when opening
            a workbook or to password protect the workbook when saving a workbook. Password protection
            works only with Excel 2003 .xls format.
            To remove password protection for an existing workbook a valid open password must be supplied
            when opening the workbook and then the OpenPassword property must be set to null before saving the workbook to prevent
            protecting again the saved document.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelDocumentSecurity.WriteWorkbookPassword">
            <summary>
            Sets the write password of a workbook. This password is required in order to edit the workbook.
            Password protection works only with Excel 2003 .xls format.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellUnderlineType">
            <summary>
            Represents the underline style of the text in a cell
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellUnderlineType.None">
            <summary>
            The cell text is not underlined.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellUnderlineType.Single">
            <summary>
            Single underline.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellUnderlineType.Double">
             <summary>
            Double underline.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellUnderlineType.SingleAccounting">
             <summary>
            Single Accounting underline.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellUnderlineType.DoubleAccounting">
             <summary>
            Double Accounting underline.
             </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellLineStyle">
             <summary>
            Enumeration of the border line styles for cells in Excel.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.None">
            <summary>
            No line
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.Hair">
            <summary>
            Hair continous line
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.Medium">
            <summary>
            Medium continous line
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.Thin">
            <summary>
            Thin continous line
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.Thick">
            <summary>
            Thick continous line
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.Dash">
            <summary>
            Dashed line
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.MediumDash">
            <summary>
            Medium dashed line
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.DashDot">
            <summary>
            Alternating dashes and dots
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.MediumDashDot">
            <summary>
            Alternating medium dashes and dots
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.DashDotDot">
            <summary>
            Dash followed by two dots
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.MediumDashDotDot">
            <summary>
            Medium dash followed by two dots
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.Dot">
            <summary>
            Dotted line
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.Double">
            <summary>
            
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellLineStyle.SlantDashDot">
            <summary>
            Slanted dashes
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelShapeFillPicture">
            <summary>
            Represents a picture fill of a shape interior.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillPicture.CustomPicture">
            <summary>
            Gets or sets the interior picture.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillPicture.CustomPictureName">
            <summary>
            Gets or sets the name of the interior picture.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelGroupBy">
             <summary>
            Describes how to group the range.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGroupBy.Rows">
             <summary>
            Group range by rows.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGroupBy.Columns">
             <summary>
            Group range by columns.
             </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelGradientVariants">
            <summary>
            Represents the variants for a gradient direction.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientVariants.Variant1">
            <summary>
            Variant 1
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientVariants.Variant2">
            <summary>
            Variant 2
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientVariants.Variant3">
            <summary>
            Variant 3
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientVariants.Variant4">
            <summary>
            Variant 4
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelPicture">
            <summary>
            Represents a picture in a worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.Worksheet">
            <summary>
            Gets the worksheet of this picture.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.ImageObj">
            <summary>
            Gets the System.Drawing.Image object.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.LeftColumnIndex">
            <summary>
            Gets or sets the one based left column index of the picture in the worksheet. The left column is included in the picture area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.RightColumnIndex">
            <summary>
            Gets or sets the one based right column index of the picture area in the worksheet. The right column is not included in the picture area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.TopRowIndex">
            <summary>
            Gets or sets the one based top row index of the picture area in the worksheet. The top row is included in the picture area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.BottomRowIndex">
            <summary>
            Gets or sets the one based bottom row index of the picture area in the worksheet. The bottom row is not included in the picture area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.PictureLeftPositionPx">
            <summary>
            Gets or sets the position in pixels (1 pixels is 1/96 inch) of the the left edge of the picture area inside the worksheet. 
            The left and right column indexes are adjusted based on the specified left position to keep the width. The left position 
            is measured in pixels. The dimensions can be converted from pixels to inches using the UnitsConverter class.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.PictureTopPositionPx">
            <summary>
            Gets or sets the position in pixels (1 pixels is 1/96 inch) of the the top edge of the picture area inside the worksheet. 
            The top and bottom column indexes are adjusted based on the specified top position to keep the height. The top position 
            is measured in pixels. The dimensions can be converted from pixels to inches using the UnitsConverter class.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.PictureWidthPx">
            <summary>
            Gets or sets the width in pixels (1 pixels is 1/96 inch) of the picture area. The right column index is adjusted based on the specified width. 
            The width is measured in pixels. The dimensions can be converted from pixels to inches using the UnitsConverter class.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.PictureHeightPx">
            <summary>
            Gets or sets the height in pixels (1 pixels is 1/96 inch) of the picture area. The bottom row index is adjusted based on the specified height. 
            The height is measured in pixels. The dimensions can be converted from pixels to inches using the UnitsConverter class.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.PictureLeftPositionPoints">
            <summary>
            Gets or sets the position in points (1 point is 1/72 inch) of the the left edge of the picture area inside the worksheet. 
            The left and right column indexes are adjusted based on the specified left position to keep the width. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.PictureTopPositionPoints">
            <summary>
            Gets or sets the position in points (1 point is 1/72 inch) of the the top edge of the picture area inside the worksheet. 
            The top and bottom column indexes are adjusted based on the specified top position to keep the height.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.PictureWidthPoints">
            <summary>
            Gets or sets the picture area width in points (1 point is 1/72 inch). 
            The right column index is adjusted based on the specified width. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.PictureHeightPoints">
            <summary>
            Gets or sets the height in points (1 point is 1/72 inch) of the picture area. 
            The bottom row index is adjusted based on the specified height. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPicture.PictureName">
            <summary>
            Gets or sets the picture name in workbook. If no name was explicitly set then a default name will be generated for the picture
            when the workbook is saved.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChart">
            <summary>
            Represents a chart shape in a worksheet.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.Worksheet">
            <summary>
            Gets the worksheet of this chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.DataSourceRange">
            <summary>
            Gets or sets the data source range of the chart
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.ChartType">
            <summary>
            Gets or sets the chart type
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.SeriesByRows">
            <summary>
            Gets or sets a flag indicating if the chart series are created from the data source range rows or columns.
            The data source range can be specified when the chart is added to the worksheet. 
            When this flag is true the series are created from rows otherwise from columns.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.LeftColumnIndex">
            <summary>
            Gets or sets the one based left column index of the chart area in the worksheet. The left column is included in the chart area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.RightColumnIndex">
            <summary>
            Gets or sets the one based right column index of the chart area in the worksheet. The right column is not included in the chart area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.TopRowIndex">
            <summary>
            Gets or sets the one based top row index of the chart area in the worksheet. The top row is included in the chart area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.BottomRowIndex">
            <summary>
            Gets or sets the one based bottom row index of the chart area in the worksheet. The bottom row is not included in the chart area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.ChartLeftPositionPx">
            <summary>
            Gets or sets the position in pixels (1 pixels is 1/96 inch) of the the left edge of the chart area inside the worksheet. 
            The left and right column indexes are adjusted based on the specified left position to keep the width. The left position 
            is measured in pixels. The dimensions can be converted from pixels to inches using the UnitsConverter class.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.ChartTopPositionPx">
            <summary>
            Gets or sets the position in pixels (1 pixels is 1/96 inch) of the the top edge of the chart area inside the worksheet. 
            The top and bottom column indexes are adjusted based on the specified top position to keep the height. The top position 
            is measured in pixels. The dimensions can be converted from pixels to inches using the UnitsConverter class.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.ChartWidthPx">
            <summary>
            Gets or sets the width in pixels (1 pixels is 1/96 inch) of the chart area. The right column index is adjusted based on the specified width. 
            The width is measured in pixels. The dimensions can be converted from pixels to inches using the UnitsConverter class.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.ChartHeightPx">
            <summary>
            Gets or sets the height in pixels (1 pixels is 1/96 inch) of the chart area. The bottom row index is adjusted based on the specified height. 
            The height is measured in pixels. The dimensions can be converted from pixels to inches using the UnitsConverter class.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.ChartLeftPositionPoints">
            <summary>
            Gets or sets the position in points (1 point is 1/72 inch) of the the left edge of the chart area inside the worksheet. 
            The left and right column indexes are adjusted based on the specified left position to keep the width. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.ChartTopPositionPoints">
            <summary>
            Gets or sets the position in points (1 point is 1/72 inch) of the the top edge of the chart area inside the worksheet. 
            The top and bottom column indexes are adjusted based on the specified top position to keep the height.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.ChartWidthPoints">
            <summary>
            Gets or sets the chart area width in points (1 point is 1/72 inch). 
            The right column index is adjusted based on the specified width. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.ChartHeightPoints">
            <summary>
            Gets or sets the height in points (1 point is 1/72 inch) of the chart area. 
            The bottom row index is adjusted based on the specified height. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.CategoryAxis">
            <summary>
            Gets the category axis of this chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.ValueAxis">
            <summary>
            Gets the value axis of this chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.SeriesAxis">
            <summary>
            Gets the series axis of this chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.Series">
            <summary>
            Gets the data series collection of this chart.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.Title">
            <summary>
            Gets the chart title box. The returned object can be used to set the chart title text, font, color, background and pattern.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.ChartArea">
            <summary>
            Gets the chart area. The returned object can be used to set the border and the interior of the chart area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.PlotArea">
            <summary>
            Gets the chart plot area. The returned object can be used to set the border and the interior of the chart plot area.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.ShowDataTable">
            <summary>
            Gets or sets a flag indicating if the chart data table is displayed.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.DataTable">
            <summary>
            Gets an object that can be used to set the chart data table options.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.Legend">
            <summary>
            Gets the chart legend.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChart.Rotation3D">
            <summary>
            Gets the 3D chart rotation properties. The returned object can be used to set the X and Y axes rotation, perspective, depth and height of a 3D chart.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellTextDirectionType">
            <summary>
            Specifies the reading order for the cell 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellTextDirectionType.Context">
            <summary>
            Based on context
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellTextDirectionType.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelCellTextDirectionType.RightToLeft">
            <summary>
            Right to left.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelGradientDirection">
            <summary>
            Represents the possible directions of the gradient
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientDirection.Horizontal">
            <summary>
            Horizontal gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientDirection.Vertical">
            <summary>
            Vertical gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientDirection.DiagonlUp">
            <summary>
            Diagonl up gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientDirection.DiagonlDown">
            <summary>
            Diagonal down gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientDirection.FromCorner">
            <summary>
            From corner gradient.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelGradientDirection.FromCenter">
            <summary>
            From center gradient.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelComment">
            <summary>
            Represents a comment in a mec.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelComment.Worksheet">
            <summary>
            Gets the parent worksheet of this comment.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelComment.Author">
            <summary>
            Gets the author of the comment.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelComment.Text">
            <summary>
            Gets or sets the comment text.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelComment.ShowExpanded">
            <summary>
            Gets or sets a flag indicating if the comment is displayed expanded by default when the mec is opened.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelComment.ColumnIndex">
            <summary>
            Gets the column index of the comment.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelComment.RowIndex">
            <summary>
            Gets the row index of the comment.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartLegendEntry">
            <summary>
            Represents and entry in the chart legend.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLegendEntry.IsDeleted">
            <summary>
            Gets or sets a flag indicating if the legend entry was deleted.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLegendEntry.Font">
            <summary>
            Represents font object used to format the font of the legend entry.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartLegendEntriesCollection">
            <summary>
            Represents the collection of legend entries for a picture.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartLegendEntriesCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelChartLegendEntriesCollection.RemoveLegendEntry(System.Int32)">
            <summary>
            Removes the legend entry at the specified zero based index from collection.
            </summary>
            <param name="entryIndex">The zero based index in collection from where to remove the legend entry.</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLegendEntriesCollection.Item(System.Int32)">
            <summary>
            Gets the legend entry at the specified index. 
            </summary>
            <param name="entryIndex">A zero based index in the leend entries collection</param>
            <returns>The legend entry at the specified index</returns>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelChartLegendEntriesCollection.Count">
            <summary>
            Gets the number of legend entried in collection.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartAxisLabelPosition">
            <summary>
            Represents the axis labels position from the chart axis 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartAxisLabelPosition.None">
            <summary>
            The labels are not displayed.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartAxisLabelPosition.Low">
            <summary>
            The labels are displayed at the bottom of the chart.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartAxisLabelPosition.High">
            <summary>
            The labels are displayed at the top of the chart.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartAxisLabelPosition.NextToAxis">
            <summary>
            The labels are displayed next to the axis.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellBorder">
            <summary>
            Represents one of the borders of a range or style
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellBorder.Color">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellBorder.ColorIndex">
            <summary>
            Gets or sets the index in Excel palette of the color of this border.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellBorder.LineStyle">
            <summary>
            Gets or sets the line style of the border
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelPageBreak">
            <summary>
            Represents a horizontal or vertical page break in worksheet
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageBreak.Type">
            <summary>
            Gets the page break type (horizontal or vertical). 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageBreak.Location">
            <summary>
            The cell where the page break is inserted. For horizontal breaks the break is inserted at the
            top edge of the cell, for vertical breaks the break is inserted at the left edge of the cell.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelShapeFillPatternType">
            <summary>
            Represents the possible patterns of shape interior.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Fill_5_Percent">
            <summary>
            Fill 5% pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Fill_10_Percent">
            <summary>
            Fill 10% pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Fill_20_Percent">
            <summary>
            Fill 20% pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Fill_25_Percent">
            <summary>
            Fill 25% pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Fill_30_Percent">
            <summary>
            Fill 30% pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Fill_40_Percent">
            <summary>
            Fill 40% pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Fill_50_Percent">
            <summary>
            Fill 50% pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Fill_60_Percent">
            <summary>
            Fill 60% pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Fill_70_Percent">
            <summary>
            Fill 70% pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Fill_75_Percent">
            <summary>
            Fill 75% pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Fill_80_Percent">
            <summary>
            Fill 80% pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Fill_90_Percent">
            <summary>
            Fill 90% pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.DarkDownwardDiagonal">
            <summary>
            Dark Downward Diagonal pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.DarkHorizontal">
            <summary>
            Dark Horizontal pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.DarkUpwardDiagonal">
            <summary>
            Dark Upward Diagonal pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.DarkVertical">
            <summary>
            Dark Vertical pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.DashedDownwardDiagonal">
            <summary>
            Dashed Downward Diagonal pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.DashedHorizontal">
            <summary>
            Dashed Horizontal pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.DashedUpwardDiagonal">
            <summary>
            Dashed Upward Diagonal pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.DashedVertical">
            <summary>
            Dashed Vertical pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.DiagonalBrick">
            <summary>
            Diagonal Brick pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Divot">
            <summary>
            Divot pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.DottedDiamond">
            <summary>
            Dotted Diamond pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.DottedGrid">
            <summary>
            Dotted Grid pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Horizontal_Brick">
            <summary>
            Horizontal Brick pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.LargeCheckerBoard">
            <summary>
            Large Checker Board pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.LargeConfetti">
            <summary>
            Large Confetti pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.LargeGrid">
            <summary>
            Large Grid pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.LightDownwardDiagonal">
            <summary>
            Light Downward Diagonal pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.LightHorizontal">
            <summary>
            Light Horizontal pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.LightUpwardDiagonal">
            <summary>
            Light Upward Diagonal pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.LightVertical">
            <summary>
            Light Vertical pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.NarrowHorizontal">
            <summary>
            Narrow Horizontal pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.NarrowVertical">
            <summary>
            Narrow Vertical pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.OutlinedDiamond">
            <summary>
            Outlined Diamond pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Plaid">
            <summary>
            Plaid pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Shingle">
            <summary>
            Shingle pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.SmallCheckerBoard">
            <summary>
            Small Checker Board pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.SmallConfetti">
            <summary>
            Small Confetti pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.SmallGrid">
            <summary>
            Small Grid pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.SolidDiamond">
            <summary>
            Solid Diamond pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Sphere">
            <summary>
            Sphere pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Trellis">
            <summary>
            Trellis pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Wave">
            <summary>
            Wave pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.Weave">
            <summary>
            Weave pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.WideDownwardDiagonal">
            <summary>
            Wide Downward Diagonal pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.WideUpwardDiagonal">
            <summary>
            Wide Upward Diagonal pattern.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelShapeFillPatternType.ZigZag">
            <summary>
            Zig Zag pattern.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelShapeFillPattern">
            <summary>
            Represents the pattern fill of a shape interior.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillPattern.BackColor">
            <summary>
            Gets or sets the background color of the interior. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillPattern.BackColorIndex">
            <summary>
            Gets or sets the index in Excel palette of background color of the interior.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillPattern.PatternType">
            <summary>
            Gets or sets the interior pattern type. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillPattern.PatternColor">
            <summary>
            Gets or sets the color of the pattern. 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelShapeFillPattern.PatternColorIndex">
            <summary>
            Gets or sets the color index in Excel palette of the interior pattern. 
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelUnitsConverter">
            <summary>
            Utility class to convert between various Excel measurement units (points, pixels, width characters)
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelUnitsConverter.#ctor(Winnovative.ExcelLib.ExcelWorkbook)">
            <summary>
            Builds a UnitsConverter object
            </summary>
            <param name="workbook">The workbook used to transform pixels to width characters.</param>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelUnitsConverter.PixelsToPoints(System.Double)">
            <summary>
            Converts pixels to points. A point is 1/72 inch.
            </summary>
            <param name="pixels">The value in pixels</param>
            <returns>The value in points</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelUnitsConverter.PointsToPixels(System.Double)">
            <summary>
            Converts points to pixels. A point is 1/72 inch.
            </summary>
            <param name="points">The value in points</param>
            <returns>The value in pixels</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelUnitsConverter.WidthCharsToPixels(System.Double)">
            <summary>
            Converts width characters in pixels. A value in width characters represents the number of characters that can be displayed in a cell 
            that is formatted with the standard font.
            </summary>
            <param name="widthChars">The value in width characters</param>
            <returns>The value in pixels</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelUnitsConverter.PixelsToWidthChars(System.Double)">
            <summary>
            Converts pixels to width characters. A value in width characters represents the number of characters that can be displayed in a cell 
            that is formatted with the standard font.
            </summary>
            <param name="pixels">The value in width characters</param>
            <returns>The value in width characters</returns>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelPagePaperSize">
            <summary>
            Represents the paper size for an Excel document.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.Paper10x14">
            <summary>
            10 in. x 14 in. 
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.Paper11x17">
            <summary>
            11 in. x 17 in.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperA3">
            <summary>
            A3 (297 mm x 420 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperA4">
            <summary>
            A4 (210 mm x 297 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperA4Small">
            <summary>
            A4 Small (210 mm x 297 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperA5">
            <summary>
            A5 (148 mm x 210 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperB4">
            <summary>
            B4 (250 mm x 354 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperB5">
            <summary>
            B5 (176 mm x  250 mm).
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperCsheet">
            <summary>
            C size sheet
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperDsheet">
            <summary>
            D size sheet
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelope10">
            <summary>
            Envelope #10 (4-1/8 in. x 9-1/2 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelope11">
            <summary>
            Envelope #11 (4-1/2 in. x 10-3/8 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelope12">
            <summary>
            Envelope #12 (4-1/2 in. x 11 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelope14">
            <summary>
            Envelope #14 (5 in. x 11-1/2 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelope9">
            <summary>
            Envelope #9 (3-7/8 in. x 8-7/8 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelopeB4">
            <summary>
            Envelope B4 (250 mm x 353 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelopeB5">
            <summary>
            Envelope B5 (176 mm x 250 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelopeB6">
            <summary>
            Envelope B6 (176 mm x 125 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelopeC3">
            <summary>
            Envelope C3 (324 mm x 458 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelopeC4">
            <summary>
            Envelope C4 (229 mm x 324 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelopeC5">
            <summary>
            Envelope C5 (162 mm x 229 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelopeC6">
            <summary>
            Envelope C6 (114 mm x 162 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelopeC65">
            <summary>
            Envelope C65 (114 mm x 229 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelopeDL">
            <summary>
            Envelope DL (110 mm x 220 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelopeItaly">
            <summary>
            Envelope (110 mm x 230 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelopeMonarch">
            <summary>
            Envelope Monarch (3-7/8 in. x 7-1/2 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEnvelopePersonal">
            <summary>
            Envelope (3-5/8 in. x 6-1/2 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperEsheet">
            <summary>
            E size sheet
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperExecutive">
            <summary>
            Executive (7-1/2 in. x 10-1/2 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperFanfoldLegalGerman">
            <summary>
            German Legal Fanfold (8-1/2 in. x 13 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperFanfoldStdGerman">
            <summary>
            German Legal Fanfold (8-1/2 in. x 13 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperFanfoldUS">
            <summary>
            U.S. Standard Fanfold (14-7/8 in. x 11 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperFolio">
            <summary>
            Folio (8-1/2 in. x 13 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperLedger">
            <summary>
            Ledger (17 in. x 11 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperLegal">
            <summary>
            Legal (8-1/2 in. x 14 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperLetter">
            <summary>
            Letter (8-1/2 in. x 11 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperLetterSmall">
            <summary>
            Letter Small (8-1/2 in. x 11 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperNote">
            <summary>
            Note (8-1/2 in. x 11 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperQuarto">
            <summary>
            Quarto (215 mm x 275 mm)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperStatement">
            <summary>
            Statement (5-1/2 in. x 8-1/2 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperTabloid">
            <summary>
            Tabloid (11 in. x 17 in.)
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelPagePaperSize.PaperUser">
             <summary>
            User-defined
             </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelPageBreaksCollection">
            <summary>
            Represents a collection of page breaks.
            </summary>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelPageBreaksCollection.GetEnumerator">
            <summary>
            Gets the collection enumerator
            </summary>
            <returns>The collection enumerator</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelPageBreaksCollection.AddPageBreak(Winnovative.ExcelLib.ExcelRange)">
            <summary>
            Adds a page break to the specified location in worksheet. 
            For a horizontal page breaks collection the break is inserted in worksheet at the
            top edge of the range, for a vertical pae breaks collection the break is inserted 
            at the left edge of the range.
            </summary>
            <param name="locationRange">The page break location.</param>
            <returns>The newly added page break.</returns>
        </member>
        <member name="M:Winnovative.ExcelLib.ExcelPageBreaksCollection.RemovePageBreak(System.Int32)">
            <summary>
            Removes the page break at the specified zero based index from collection.
            </summary>
            <param name="pageBreakIndex">The zero based index in collection of the page break to be removed.</param>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageBreaksCollection.Type">
            <summary>
            Gets the page breaks type (horizontal or vertical). 
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageBreaksCollection.Count">
            <summary>
            Gets the number of page breaks in collection.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelPageBreaksCollection.Item(System.Int32)">
            <summary>
            Gets the page break at the specified index. 
            </summary>
            <param name="pageBreakIndex">A zero based index in the page breaks collection.</param>
            <returns>The page break at the specified index.</returns>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelChartLineType">
            <summary>
            Represents the type of line for a chart element border.
            </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLineType.SolidLine">
             <summary>
            The solid line.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLineType.DashedLine">
             <summary>
            The dashed line.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLineType.DottedLine">
             <summary>
            The dotted line
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLineType.DashDotLine">
             <summary>
            The dash dot line.
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLineType.DashDotDotLine">
             <summary>
            The dash dot dot line .
             </summary>
        </member>
        <member name="F:Winnovative.ExcelLib.ExcelChartLineType.NoLine">
            <summary>
            No line.
            </summary>
        </member>
        <member name="T:Winnovative.ExcelLib.ExcelCellStyle">
            <summary>
            Represents the style of a cell or a range of cells.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellStyle.IsBuiltIn">
            <summary>
            Gets a flag indicating if this cell style is a built in style.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellStyle.Name">
            <summary>
            Gets the name of this cell style. The name is assigned when the style is added to the Styles collection of the workbook.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellStyle.Number">
            <summary>
            Gets the number formatting options of the cell.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellStyle.Alignment">
            <summary>
            Gets the text alignment options for the text in a cell.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellStyle.Borders">
            <summary>
            Gets the an object representing the cell borders collection. Top, left, right and bottom borders can be retrieved individually from the borders collection and customized.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellStyle.Fill">
            <summary>
            Gets an object used to set the fill options of the cell.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellStyle.Font">
            <summary>
            Gets an object used to set the font of the cell.
            </summary>
        </member>
        <member name="P:Winnovative.ExcelLib.ExcelCellStyle.Protection">
            <summary>
            Gets an object used to set the protection options of the cell. The protection options are applied only when the worksheet is protected.
            </summary>
        </member>
    </members>
</doc>
